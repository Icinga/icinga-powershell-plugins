object CheckCommand "Invoke-IcingaCheckScheduledTask" {
    import "PowerShell Base"

    arguments += {
        "-WarningNextRunTime" = {
            set_if = {{
                var str = macro("$IcingaCheckScheduledTask_String_WarningNextRunTime$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Allows to specify a time interval, on which the check will return warning based on the next run time of a task and the current time. The value will be added to the current time  Values have to be specified as time units like, 10m, 1d, 1w, 2M, 1y"
            value = {{
                var str = macro("$IcingaCheckScheduledTask_String_WarningNextRunTime$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 9
        }
        "-CriticalNextRunTime" = {
            set_if = {{
                var str = macro("$IcingaCheckScheduledTask_String_CriticalNextRunTime$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Allows to specify a time interval, on which the check will return critical based on the next run time of a task and the current time. The value will be added to the current time  Values have to be specified as time units like, 10m, 1d, 1w, 2M, 1y"
            value = {{
                var str = macro("$IcingaCheckScheduledTask_String_CriticalNextRunTime$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 10
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckScheduledTask_Switchparameter_NoPerfData$"
            order = 99
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckScheduledTask' "
            order = 0
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckScheduledTask_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckScheduledTask_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-WarningMissedRuns" = {
            description = "Defines a warning threshold for missed runs for filtered tasks.  Supports Icinga default threshold syntax."
            value = "$IcingaCheckScheduledTask_Object_WarningMissedRuns$"
            order = 5
        }
        "-IgnoreLastRunTime" = {
            set_if = "$IcingaCheckScheduledTask_Switchparameter_IgnoreLastRunTime$"
            order = 99
        }
        "-TaskName" = {
            description = "A list of tasks to check for. If your tasks contain spaces, wrap them around a ' to ensure they are properly handled as string"
            value = {{
                var arr = macro("$IcingaCheckScheduledTask_Array_TaskName$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
        "-CriticalLastRunTime" = {
            set_if = {{
                var str = macro("$IcingaCheckScheduledTask_String_CriticalLastRunTime$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Allows to specify a time interval, on which the check will return critical based on the last run time of a task and the current time. The value will be subtracted from the current time  Values have to be specified as time units like, -10m, -1d, -1w, -2M, -1y"
            value = {{
                var str = macro("$IcingaCheckScheduledTask_String_CriticalLastRunTime$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 8
        }
        "-IgnoreExitCodes" = {
            description = "A list of exit codes which will be considered as [OK]. By default every task which did not exit with 0 will be handled as critical."
            value = {{
                var arr = macro("$IcingaCheckScheduledTask_Array_IgnoreExitCodes$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 4
        }
        "-CriticalMissedRuns" = {
            description = "Defines a critical threshold for missed runs for filtered tasks.  Supports Icinga default threshold syntax."
            value = "$IcingaCheckScheduledTask_Object_CriticalMissedRuns$"
            order = 6
        }
        "-State" = {
            description = "The state a task should currently have for the plugin to return [OK]"
            value = {{
                var arr = macro("$IcingaCheckScheduledTask_Array_State$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckScheduledTask_Int32_Verbosity$"
            order = 11
        }
        "-WarningLastRunTime" = {
            set_if = {{
                var str = macro("$IcingaCheckScheduledTask_String_WarningLastRunTime$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Allows to specify a time interval, on which the check will return warning based on the last run time of a task and the current time. The value will be subtracted from the current time  Values have to be specified as time units like, -10m, -1d, -1w, -2M, -1y"
            value = {{
                var str = macro("$IcingaCheckScheduledTask_String_WarningLastRunTime$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 7
        }
    }
    vars.IcingaCheckScheduledTask_Switchparameter_IgnoreLastRunTime = false
    vars.ifw_api_arguments = {
        "CriticalNextRunTime" = {
            value = "$IcingaCheckScheduledTask_String_CriticalNextRunTime$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckScheduledTask_String_ThresholdInterval$"
        }
        "TaskName" = {
            value = "$IcingaCheckScheduledTask_Array_TaskName$"
        }
        "WarningMissedRuns" = {
            value = "$IcingaCheckScheduledTask_Object_WarningMissedRuns$"
        }
        "WarningNextRunTime" = {
            value = "$IcingaCheckScheduledTask_String_WarningNextRunTime$"
        }
        "CriticalLastRunTime" = {
            value = "$IcingaCheckScheduledTask_String_CriticalLastRunTime$"
        }
        "CriticalMissedRuns" = {
            value = "$IcingaCheckScheduledTask_Object_CriticalMissedRuns$"
        }
        "IgnoreLastRunTime" = {
            set_if = "$IcingaCheckScheduledTask_Switchparameter_IgnoreLastRunTime$"
        }
        "IgnoreExitCodes" = {
            value = "$IcingaCheckScheduledTask_Array_IgnoreExitCodes$"
        }
        "WarningLastRunTime" = {
            value = "$IcingaCheckScheduledTask_String_WarningLastRunTime$"
        }
        "State" = {
            value = "$IcingaCheckScheduledTask_Array_State$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckScheduledTask_Switchparameter_NoPerfData$"
        }
        "Verbosity" = {
            value = "$IcingaCheckScheduledTask_Int32_Verbosity$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckscheduledtask"
    vars.IcingaCheckScheduledTask_Switchparameter_NoPerfData = false
}
