object CheckCommand "Invoke-IcingaCheckProcess" {
    import "PowerShell Base"

    arguments += {
        "-TotalThreadCountCritical" = {
            description = "Compares thread usage for all processes with the same name against the given threshold. Will throw critical if exceeded.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_TotalThreadCountCritical$"
            order = 17
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckProcess_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckProcess_Int32_Verbosity$"
            order = 21
        }
        "-TotalThreadCountWarning" = {
            description = "Compares thread usage for all processes with the same name against the given threshold. Will throw warning if exceeded.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_TotalThreadCountWarning$"
            order = 16
        }
        "-MemoryWarning" = {
            description = "Compares each single process memory usage against the given threshold. Will throw warning if exceeded. Supports % unit to compare the process memory usage for the entire memory space available.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_MemoryWarning$"
            order = 4
        }
        "-Process" = {
            description = "Allows to filter for a list of processes with a given name. Use the process name without file ending, like '.exe'."
            value = {{
                var arr = macro("$IcingaCheckProcess_Array_Process$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 20
        }
        "-TotalCPUWarning" = {
            description = "Compares cpu usage for all processes with the same name against the given threshold. Will throw warning if exceeded.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_TotalCPUWarning$"
            order = 14
        }
        "-TotalMemoryWarning" = {
            description = "Compares memory usage for all processes with the same name against the given threshold. Will throw warning if exceeded. Supports % unit to compare the total process memory usage for the entire memory space available.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_TotalMemoryWarning$"
            order = 12
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckProcess' "
            order = 0
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckProcess_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckProcess_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-PageFileCritical" = {
            description = "Compares each single process page file usage against the given threshold. Will throw critical if exceeded. Supports % unit to compare the process page file usage for the entire page file space available.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_PageFileCritical$"
            order = 3
        }
        "-CPUWarning" = {
            description = "Compares each single process cpu usage against the given threshold. Will throw warning if exceeded.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_CPUWarning$"
            order = 6
        }
        "-TotalPageFileWarning" = {
            description = "Compares page file usage for all processes with the same name against the given threshold. Will throw warning if exceeded. Supports % unit to compare the total process page file usage for the entire page file space available.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_TotalPageFileWarning$"
            order = 10
        }
        "-ThreadCountWarning" = {
            description = "Compares each single process thread usage against the given threshold. Will throw warning if exceeded.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_ThreadCountWarning$"
            order = 8
        }
        "-TotalProcessCountWarning" = {
            description = "Compares process count for all processes with the same name against the given threshold. Will throw warning if exceeded.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_TotalProcessCountWarning$"
            order = 18
        }
        "-CPUCritical" = {
            description = "Compares each single process cpu usage against the given threshold. Will throw critical if exceeded.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_CPUCritical$"
            order = 7
        }
        "-TotalCPUCritical" = {
            description = "Compares cpu usage for all processes with the same name against the given threshold. Will throw critical if exceeded.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_TotalCPUCritical$"
            order = 15
        }
        "-MemoryCritical" = {
            description = "Compares each single process memory usage against the given threshold. Will throw critical if exceeded. Supports % unit to compare the process memory usage for the entire memory space available.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_MemoryCritical$"
            order = 5
        }
        "-PageFileWarning" = {
            description = "Compares each single process page file usage against the given threshold. Will throw warning if exceeded. Supports % unit to compare the process page file usage for the entire page file space available.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_PageFileWarning$"
            order = 2
        }
        "-TotalProcessCountCritical" = {
            description = "Compares process count for all processes with the same name against the given threshold. Will throw critical if exceeded.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_TotalProcessCountCritical$"
            order = 19
        }
        "-TotalPageFileCritical" = {
            description = "Compares page file usage for all processes with the same name against the given threshold. Will throw critical if exceeded. Supports % unit to compare the total process page file usage for the entire page file space available.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_TotalPageFileCritical$"
            order = 11
        }
        "-TotalMemoryCritical" = {
            description = "Compares memory usage for all processes with the same name against the given threshold. Will throw critical if exceeded. Supports % unit to compare the total process memory usage for the entire memory space available.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_TotalMemoryCritical$"
            order = 13
        }
        "-ThreadCountCritical" = {
            description = "Compares each single process thread usage against the given threshold. Will throw critical if exceeded.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_ThreadCountCritical$"
            order = 9
        }
    }
    vars.IcingaCheckProcess_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "TotalThreadCountWarning" = {
            value = "$IcingaCheckProcess_Object_TotalThreadCountWarning$"
        }
        "ThreadCountWarning" = {
            value = "$IcingaCheckProcess_Object_ThreadCountWarning$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckProcess_Switchparameter_NoPerfData$"
        }
        "CPUCritical" = {
            value = "$IcingaCheckProcess_Object_CPUCritical$"
        }
        "TotalPageFileCritical" = {
            value = "$IcingaCheckProcess_Object_TotalPageFileCritical$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckProcess_String_ThresholdInterval$"
        }
        "TotalPageFileWarning" = {
            value = "$IcingaCheckProcess_Object_TotalPageFileWarning$"
        }
        "PageFileWarning" = {
            value = "$IcingaCheckProcess_Object_PageFileWarning$"
        }
        "ThreadCountCritical" = {
            value = "$IcingaCheckProcess_Object_ThreadCountCritical$"
        }
        "TotalCPUWarning" = {
            value = "$IcingaCheckProcess_Object_TotalCPUWarning$"
        }
        "PageFileCritical" = {
            value = "$IcingaCheckProcess_Object_PageFileCritical$"
        }
        "Process" = {
            value = "$IcingaCheckProcess_Array_Process$"
        }
        "TotalProcessCountWarning" = {
            value = "$IcingaCheckProcess_Object_TotalProcessCountWarning$"
        }
        "CPUWarning" = {
            value = "$IcingaCheckProcess_Object_CPUWarning$"
        }
        "TotalMemoryCritical" = {
            value = "$IcingaCheckProcess_Object_TotalMemoryCritical$"
        }
        "TotalMemoryWarning" = {
            value = "$IcingaCheckProcess_Object_TotalMemoryWarning$"
        }
        "TotalThreadCountCritical" = {
            value = "$IcingaCheckProcess_Object_TotalThreadCountCritical$"
        }
        "MemoryWarning" = {
            value = "$IcingaCheckProcess_Object_MemoryWarning$"
        }
        "Verbosity" = {
            value = "$IcingaCheckProcess_Int32_Verbosity$"
        }
        "TotalProcessCountCritical" = {
            value = "$IcingaCheckProcess_Object_TotalProcessCountCritical$"
        }
        "MemoryCritical" = {
            value = "$IcingaCheckProcess_Object_MemoryCritical$"
        }
        "TotalCPUCritical" = {
            value = "$IcingaCheckProcess_Object_TotalCPUCritical$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckprocess"
}
