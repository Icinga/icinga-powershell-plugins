object CheckCommand "Invoke-IcingaCheckEventlog" {
    import "PowerShell Base"

    arguments += {
        "-Before" = {
            description = "Defines the end point on which timeframe the plugin will stop to read event log information. Using 2h as argument as example, will ignore all events of the past 2 hours from the time the plugin was executed. This should be used in combination with the '-After' argument. As example, you could provide '-After 6h' to start reading all eventlogs from the past 6 hours, and use '-Before 2h' to skip the last 2 hours. In this scenario, would receive 4 hours of eventlogs, while the last 2 hours have been ignored. For thresholds you can be very specific by providing the time in a time format or by using simple time metrics by their units. Examples:  '2024/01/01 12:00:00': Will stop reading eventlogs after the 1st January 2024 12:00 CET '2024/01/15': Will stop reading eventlogs after the 15th January 2024 00:00 CET '4h': Will ignore eventlogs of the past 4 hours '1d': Will ignore eventlogs of the past day (24 hours)  Allowed units for time metrics: ms, s, m, h, d, w, M, y  Example ``` Start of EventLog        Plugin Execution v         After 6h           Before 2h  v |-------------|------------------|------| 8:00        10:00              14:00    16:00 | Not fetched | Fetched          | Not fetched```"
            value = "$IcingaCheckEventlog_Object_Before$"
            order = 18
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckEventlog_Switchparameter_NoPerfData$"
            order = 99
        }
        "-IncludeMessage" = {
            description = "Used to specify an array of messages within the eventlog to be included."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_IncludeMessage$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 11
        }
        "-IncludeSource" = {
            description = "Used to specify an array of message sources within the eventlog to be included."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_IncludeSource$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 13
        }
        "-After" = {
            description = "Defines the starting point on which timeframe the plugin will start to read event log information. Using 4h as argument as example, will provide all entries from the time the plugin was executed to the past 4 hours. For thresholds you can be very specific by providing the time in a time format or by using simple time metrics by their units. Examples:  '2024/01/01 12:00:00': Will start reading eventlogs after the 1st January 2024 12:00 CET '2024/01/15': Will start reading eventlogs after the 15th January 2024 00:00 CET '4h': Will read the past 4 hours '1d': Will read the past day (24 hours)  Allowed units for time metrics: ms, s, m, h, d, w, M, y  Example ``` Start of EventLog       Plugin Execution v                After 4h              v |--------------------|-----------------| 10:00              12:00           16:00 | Not fetched        | Fetched         |```"
            value = "$IcingaCheckEventlog_Object_After$"
            order = 17
        }
        "-IncludeEventId" = {
            description = "Used to specify an array of events identified by their id to be included."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_IncludeEventId$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 5
        }
        "-LogName" = {
            set_if = {{
                var str = macro("$IcingaCheckEventlog_String_LogName$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Used to specify a certain log."
            value = {{
                var str = macro("$IcingaCheckEventlog_String_LogName$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 4
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckEventlog_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/110-Installation/06-Collect-Metrics-over-Time/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckEventlog_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-ExcludeSource" = {
            description = "Used to specify an array of message sources within the eventlog to be excluded."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ExcludeSource$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 14
        }
        "-AcknowledgeId" = {
            description = "Used to specify an array of event IDs that should be marked as acknowledged. These event IDs will be compared to the provided ProblemIds. If no event ID for a ProblemId is found it will be marked as a problem. If you provide multiple ProblemIds, you must specify the same number of AcknowledgeIds. If you have multiple ProblemIds but only one AcknowledgeId, you need to add the AcknowledgeId multiple times to this array."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_AcknowledgeId$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 16
        }
        "-ExcludeUsername" = {
            description = "Used to specify an array of usernames within the eventlog to be excluded."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ExcludeUsername$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 8
        }
        "-ExcludeEntryType" = {
            description = "Used to specify an array of entry types within the eventlog to be excluded. Please note that `SuccessAudit` and `FailureAudit` only apply to the `Security` EventLog."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ExcludeEntryType$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 10
        }
        "-IncludeEntryType" = {
            description = "Used to specify an array of entry types within the eventlog to be included. Please note that `SuccessAudit` and `FailureAudit` only apply to the `Security` EventLog."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_IncludeEntryType$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 9
        }
        "-MaxEntries" = {
            description = "Allows to limit the amount of log entries fetched by Get-WinEvent, to increase performance and reduce system load impact Should match the average amount of log files written for the intended time range filtered"
            value = "$IcingaCheckEventlog_Int32_MaxEntries$"
            order = 19
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckEventlog_Int32_Verbosity$"
            order = 20
        }
        "-ExcludeEventId" = {
            description = "Used to specify an array of events identified by their id to be excluded."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ExcludeEventId$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 6
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold."
            value = "$IcingaCheckEventlog_Object_Critical$"
            order = 3
        }
        "-ProblemId" = {
            description = "Used to specify an array of event IDs that should be marked as problems. These event IDs will be compared to the provided AcknowledgeIds. If no event ID for an AcknowledgeId is found after the corresponding problem event ID has occurred, it will be marked as a problem. If you provide multiple ProblemIds, you must specify the same number of AcknowledgeIds. If you have multiple ProblemIds but only one AcknowledgeId, you need to add the AcknowledgeId multiple times to the AcknowledgeIds array."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ProblemId$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 15
        }
        "-DisableTimeCache" = {
            set_if = "$IcingaCheckEventlog_Switchparameter_DisableTimeCache$"
            order = 99
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold."
            value = "$IcingaCheckEventlog_Object_Warning$"
            order = 2
        }
        "-IncludeUsername" = {
            description = "Used to specify an array of usernames within the eventlog to be included."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_IncludeUsername$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 7
        }
        "-ExcludeMessage" = {
            description = "Used to specify an array of messages within the eventlog to be excluded."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ExcludeMessage$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 12
        }
    }
    vars.IcingaCheckEventlog_Switchparameter_DisableTimeCache = false
    vars.ifw_api_arguments = {
        "IncludeEventId" = {
            value = "$IcingaCheckEventlog_Array_IncludeEventId$"
        }
        "DisableTimeCache" = {
            set_if = "$IcingaCheckEventlog_Switchparameter_DisableTimeCache$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckEventlog_String_ThresholdInterval$"
        }
        "AcknowledgeId" = {
            value = "$IcingaCheckEventlog_Array_AcknowledgeId$"
        }
        "ExcludeEventId" = {
            value = "$IcingaCheckEventlog_Array_ExcludeEventId$"
        }
        "Before" = {
            value = "$IcingaCheckEventlog_Object_Before$"
        }
        "IncludeEntryType" = {
            value = "$IcingaCheckEventlog_Array_IncludeEntryType$"
        }
        "LogName" = {
            value = "$IcingaCheckEventlog_String_LogName$"
        }
        "ProblemId" = {
            value = "$IcingaCheckEventlog_Array_ProblemId$"
        }
        "ExcludeEntryType" = {
            value = "$IcingaCheckEventlog_Array_ExcludeEntryType$"
        }
        "IncludeSource" = {
            value = "$IcingaCheckEventlog_Array_IncludeSource$"
        }
        "Warning" = {
            value = "$IcingaCheckEventlog_Object_Warning$"
        }
        "MaxEntries" = {
            value = "$IcingaCheckEventlog_Int32_MaxEntries$"
        }
        "Critical" = {
            value = "$IcingaCheckEventlog_Object_Critical$"
        }
        "ExcludeUsername" = {
            value = "$IcingaCheckEventlog_Array_ExcludeUsername$"
        }
        "After" = {
            value = "$IcingaCheckEventlog_Object_After$"
        }
        "IncludeUsername" = {
            value = "$IcingaCheckEventlog_Array_IncludeUsername$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckEventlog_Switchparameter_NoPerfData$"
        }
        "ExcludeSource" = {
            value = "$IcingaCheckEventlog_Array_ExcludeSource$"
        }
        "IncludeMessage" = {
            value = "$IcingaCheckEventlog_Array_IncludeMessage$"
        }
        "ExcludeMessage" = {
            value = "$IcingaCheckEventlog_Array_ExcludeMessage$"
        }
        "Verbosity" = {
            value = "$IcingaCheckEventlog_Int32_Verbosity$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckeventlog"
    vars.IcingaCheckEventlog_Switchparameter_NoPerfData = false
}
