object CheckCommand "Invoke-IcingaCheckHttpJsonResponse" {
    import "PowerShell Base"

    arguments += {
        "-ServerPath" = {
            set_if = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_ServerPath$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Path for the request, example '/v1/my_endpoint'"
            value = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_ServerPath$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 3
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckHttpJsonResponse_Int32_Verbosity$"
            order = 13
        }
        "-StatusOnRequestError" = {
            set_if = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_StatusOnRequestError$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Status to set when the webservice cannot be reached or an error (e.g. 500) is returned - default is Unknown See https://icinga.com/docs/icinga-for-windows/latest/plugins/doc/10-Icinga-Plugins/ for description of threshold values"
            value = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_StatusOnRequestError$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 12
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckHttpJsonResponse_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Password" = {
            description = "Credentials to use for basic auth"
            value = "(ConvertTo-IcingaSecureString '$IcingaCheckHttpJsonResponse_Securestring_Password$')"
            order = 6
        }
        "-Username" = {
            set_if = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_Username$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Credentials to use for basic auth"
            value = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_Username$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 5
        }
        "-ValuePaths" = {
            description = "paths to look for values in the JSON object that is checked, including an alias for each parameter. Example: 'myAlias01:value01','myAlias02:nested.object.value02', 'myAlias03:'object'.'my.Par.With.Dots''"
            value = {{
                var arr = macro("$IcingaCheckHttpJsonResponse_Array_ValuePaths$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 8
        }
        "-ValueTypes" = {
            description = "Value types of each parameter. Supported Types: Numeric, Boolean, DateTime, String Example: 'myAlias01:Numeric','myAlias02:DateTime'"
            value = {{
                var arr = macro("$IcingaCheckHttpJsonResponse_Array_ValueTypes$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 9
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckHttpJsonResponse' "
            order = 0
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-ServerUri" = {
            set_if = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_ServerUri$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Base URI of the server, example 'https://example.comm'"
            value = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_ServerUri$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 2
        }
        "-Critical" = {
            description = "Critical thresholds using icinga-powershell syntax. Example: 'myNumericAlias01:~:2','myDateTimeAlias:-10d', 'myBooleanAlias:True'"
            value = {{
                var arr = macro("$IcingaCheckHttpJsonResponse_Array_Critical$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 11
        }
        "-IgnoreSSL" = {
            set_if = "$IcingaCheckHttpJsonResponse_Switchparameter_IgnoreSSL$"
            order = 99
        }
        "-Timeout" = {
            description = "Timeout in seconds before the http request is aborted. Defaults to 30"
            value = "$IcingaCheckHttpJsonResponse_Int32_Timeout$"
            order = 7
        }
        "-Warning" = {
            description = "Warning thresholds using icinga-powershell syntax. Example: 'myNumericAlias01:~:2','myDateTimeAlias:-10d', 'myBooleanAlias:True'"
            value = {{
                var arr = macro("$IcingaCheckHttpJsonResponse_Array_Warning$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 10
        }
        "-QueryParameter" = {
            set_if = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_QueryParameter$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Query parameter for the request without ?, example 'command=example'"
            value = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_QueryParameter$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 4
        }
        "-NegateStringResults" = {
            set_if = "$IcingaCheckHttpJsonResponse_Switchparameter_NegateStringResults$"
            order = 99
        }
    }
    vars.IcingaCheckHttpJsonResponse_Switchparameter_NegateStringResults = false
    vars.ifw_api_arguments = {
        "QueryParameter" = {
            value = "$IcingaCheckHttpJsonResponse_String_QueryParameter$"
        }
        "Timeout" = {
            value = "$IcingaCheckHttpJsonResponse_Int32_Timeout$"
        }
        "Username" = {
            value = "$IcingaCheckHttpJsonResponse_String_Username$"
        }
        "Password" = {
            value = "$IcingaCheckHttpJsonResponse_Securestring_Password$"
        }
        "ValueTypes" = {
            value = "$IcingaCheckHttpJsonResponse_Array_ValueTypes$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckHttpJsonResponse_String_ThresholdInterval$"
        }
        "IgnoreSSL" = {
            set_if = "$IcingaCheckHttpJsonResponse_Switchparameter_IgnoreSSL$"
        }
        "ServerPath" = {
            value = "$IcingaCheckHttpJsonResponse_String_ServerPath$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckHttpJsonResponse_Switchparameter_NoPerfData$"
        }
        "Warning" = {
            value = "$IcingaCheckHttpJsonResponse_Array_Warning$"
        }
        "Critical" = {
            value = "$IcingaCheckHttpJsonResponse_Array_Critical$"
        }
        "ValuePaths" = {
            value = "$IcingaCheckHttpJsonResponse_Array_ValuePaths$"
        }
        "StatusOnRequestError" = {
            value = "$IcingaCheckHttpJsonResponse_String_StatusOnRequestError$"
        }
        "NegateStringResults" = {
            set_if = "$IcingaCheckHttpJsonResponse_Switchparameter_NegateStringResults$"
        }
        "Verbosity" = {
            value = "$IcingaCheckHttpJsonResponse_Int32_Verbosity$"
        }
        "ServerUri" = {
            value = "$IcingaCheckHttpJsonResponse_String_ServerUri$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckhttpjsonresponse"
    vars.IcingaCheckHttpJsonResponse_Switchparameter_IgnoreSSL = false
    vars.IcingaCheckHttpJsonResponse_Switchparameter_NoPerfData = false
}
