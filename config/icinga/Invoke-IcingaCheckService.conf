object CheckCommand "Invoke-IcingaCheckService" {
    import "PowerShell Base"

    arguments += {
        "-FilterStartupType" = {
            description = "Allows to include only services with a specific startup type inside the monitoring, in case you check for a list of specific services by using `-Service`"
            value = {{
                var arr = macro("$IcingaCheckService_Array_FilterStartupType$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 5
        }
        "-MitigateUnknown" = {
            set_if = "$IcingaCheckService_Switchparameter_MitigateUnknown$"
            order = 99
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckService_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/110-Installation/06-Collect-Metrics-over-Time/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckService_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckService_Int32_Verbosity$"
            order = 7
        }
        "-OverrideNotFound" = {
            set_if = {{
                var str = macro("$IcingaCheckService_String_OverrideNotFound$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "This argument will allow you to override the default behavior of the plugin in case a service was not found on the system. By default, it will report UNKNOWN but you can set with this argument if the service state should be OK, WARNING or CRITICAL instead"
            value = {{
                var str = macro("$IcingaCheckService_String_OverrideNotFound$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 6
        }
        "-Status" = {
            set_if = {{
                var str = macro("$IcingaCheckService_String_Status$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Status for the specified service or services to check against."
            value = {{
                var str = macro("$IcingaCheckService_String_Status$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 4
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckService_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Service" = {
            description = "Used to specify an array of services which should be checked against the status. Supports '*' for wildcards."
            value = {{
                var arr = macro("$IcingaCheckService_Array_Service$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
        "-Exclude" = {
            description = "Allows to exclude services which might come in handy for checking services which are configured to start automatically on Windows but are not running and weren't exited properly."
            value = {{
                var arr = macro("$IcingaCheckService_Array_Exclude$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
    }
    vars.IcingaCheckService_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "ThresholdInterval" = {
            value = "$IcingaCheckService_String_ThresholdInterval$"
        }
        "MitigateUnknown" = {
            set_if = "$IcingaCheckService_Switchparameter_MitigateUnknown$"
        }
        "FilterStartupType" = {
            value = "$IcingaCheckService_Array_FilterStartupType$"
        }
        "Verbosity" = {
            value = "$IcingaCheckService_Int32_Verbosity$"
        }
        "Service" = {
            value = "$IcingaCheckService_Array_Service$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckService_Switchparameter_NoPerfData$"
        }
        "Status" = {
            value = "$IcingaCheckService_String_Status$"
        }
        "OverrideNotFound" = {
            value = "$IcingaCheckService_String_OverrideNotFound$"
        }
        "Exclude" = {
            value = "$IcingaCheckService_Array_Exclude$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckservice"
    vars.IcingaCheckService_Switchparameter_MitigateUnknown = false
}
