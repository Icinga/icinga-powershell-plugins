object CheckCommand "Invoke-IcingaCheckUptime" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckUptime' "
            order = 0
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckUptime_Int32_Verbosity$"
            order = 4
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckUptime_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckUptime_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Warning" = {
            set_if = {{
                var str = macro("$IcingaCheckUptime_String_Warning$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Used to specify a Warning threshold. In this case a string. Allowed units include: ms, s, m, h, d, w, M, y"
            value = {{
                var str = macro("$IcingaCheckUptime_String_Warning$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 2
        }
        "-Critical" = {
            set_if = {{
                var str = macro("$IcingaCheckUptime_String_Critical$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Used to specify a Critical threshold. In this case a string. Allowed units include: ms, s, m, h, d, w, M, y"
            value = {{
                var str = macro("$IcingaCheckUptime_String_Critical$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 3
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckUptime_Switchparameter_NoPerfData$"
            order = 99
        }
    }
    vars.IcingaCheckUptime_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "Critical" = {
            value = "$IcingaCheckUptime_String_Critical$"
        }
        "Warning" = {
            value = "$IcingaCheckUptime_String_Warning$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckUptime_String_ThresholdInterval$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckUptime_Switchparameter_NoPerfData$"
        }
        "Verbosity" = {
            value = "$IcingaCheckUptime_Int32_Verbosity$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckuptime"
}
