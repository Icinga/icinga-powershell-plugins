object CheckCommand "Invoke-IcingaCheckTCP" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckTCP' "
            order = 0
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckTCP_Object_Verbosity$"
            order = 6
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckTCP_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckTCP_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Address" = {
            set_if = {{
                var str = macro("$IcingaCheckTCP_String_Address$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "The IP address or FQDN of the target host"
            value = {{
                var str = macro("$IcingaCheckTCP_String_Address$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 2
        }
        "-Negate" = {
            set_if = "$IcingaCheckTCP_Switchparameter_Negate$"
            order = 99
        }
        "-Critical" = {
            description = "A critical threshold for the connection time in seconds. Allows the usage of unit additions, like 100ms.  Allowed units: ms, s, m, h, d, w, M, y"
            value = "$IcingaCheckTCP_Object_Critical$"
            order = 5
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckTCP_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Ports" = {
            description = "A single or a list of ports to check on the target address"
            value = {{
                var arr = macro("$IcingaCheckTCP_Array_Ports$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
        "-Warning" = {
            description = "A warning threshold for the connection time in seconds. Allows the usage of unit additions, like 100ms.  Allowed units: ms, s, m, h, d, w, M, y"
            value = "$IcingaCheckTCP_Object_Warning$"
            order = 4
        }
    }
    vars.IcingaCheckTCP_Switchparameter_Negate = false
    vars.ifw_api_arguments = {
        "ThresholdInterval" = {
            value = "$IcingaCheckTCP_String_ThresholdInterval$"
        }
        "Ports" = {
            value = "$IcingaCheckTCP_Array_Ports$"
        }
        "Critical" = {
            value = "$IcingaCheckTCP_Object_Critical$"
        }
        "Negate" = {
            set_if = "$IcingaCheckTCP_Switchparameter_Negate$"
        }
        "Address" = {
            value = "$IcingaCheckTCP_String_Address$"
        }
        "Warning" = {
            value = "$IcingaCheckTCP_Object_Warning$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckTCP_Switchparameter_NoPerfData$"
        }
        "Verbosity" = {
            value = "$IcingaCheckTCP_Object_Verbosity$"
        }
    }
    vars.ifw_api_command = "invoke-icingachecktcp"
    vars.IcingaCheckTCP_Switchparameter_NoPerfData = false
}
