object CheckCommand "Invoke-IcingaCheckMemory" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckMemory' "
            order = 0
        }
        "-Verbosity" = {
            value = "$IcingaCheckMemory_Int32_Verbosity$"
            order = 8
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckMemory_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckMemory_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-PageFileCritical" = {
            description = "Allows to check the used page file and compare it against a size value, like '200MB' This is using the default Icinga threshold handling. It is possible to enter e.g. 10% as threshold value if you want a percentage comparison."
            value = "$IcingaCheckMemory_Object_PageFileCritical$"
            order = 5
        }
        "-ExcludePageFile" = {
            description = "Allows to filter for page files being excluded for the check"
            value = {{
                var arr = macro("$IcingaCheckMemory_Array_ExcludePageFile$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 7
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold. In this case an string value. The string has to be like, '20B', '20KB', '20MB', '20GB', '20TB', '20PB' This is using the default Icinga threshold handling. It is possible to enter e.g. 10% as threshold value if you want a percentage comparison."
            value = "$IcingaCheckMemory_Object_Warning$"
            order = 2
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold. In this case an string value. The string has to be like, '20B', '20KB', '20MB', '20GB', '20TB', '20PB' This is using the default Icinga threshold handling. It is possible to enter e.g. 10% as threshold value if you want a percentage comparison."
            value = "$IcingaCheckMemory_Object_Critical$"
            order = 3
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckMemory_Switchparameter_NoPerfData$"
            order = 99
        }
        "-PageFileWarning" = {
            description = "Allows to check the used page file and compare it against a size value, like '200MB' This is using the default Icinga threshold handling.  It is possible to enter e.g. 10% as threshold value if you want a percentage comparison."
            value = "$IcingaCheckMemory_Object_PageFileWarning$"
            order = 4
        }
        "-IncludePageFile" = {
            description = "Allows to filter for page files being included for the check"
            value = {{
                var arr = macro("$IcingaCheckMemory_Array_IncludePageFile$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 6
        }
    }
    vars.IcingaCheckMemory_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "Critical" = {
            value = "$IcingaCheckMemory_Object_Critical$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckMemory_String_ThresholdInterval$"
        }
        "PageFileWarning" = {
            value = "$IcingaCheckMemory_Object_PageFileWarning$"
        }
        "PageFileCritical" = {
            value = "$IcingaCheckMemory_Object_PageFileCritical$"
        }
        "IncludePageFile" = {
            value = "$IcingaCheckMemory_Array_IncludePageFile$"
        }
        "Warning" = {
            value = "$IcingaCheckMemory_Object_Warning$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckMemory_Switchparameter_NoPerfData$"
        }
        "ExcludePageFile" = {
            value = "$IcingaCheckMemory_Array_ExcludePageFile$"
        }
        "Verbosity" = {
            value = "$IcingaCheckMemory_Int32_Verbosity$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckmemory"
}
