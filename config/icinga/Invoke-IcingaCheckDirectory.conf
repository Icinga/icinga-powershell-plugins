object CheckCommand "Invoke-IcingaCheckDirectory" {
    import "PowerShell Base"

    arguments += {
        "-CriticalLargestFile" = {
            description = "Checks the largest file size found for the given filters and input and returns critical for the provided threshold.  Follows the Icinga plugin threshold guidelines."
            value = "$IcingaCheckDirectory_Object_CriticalLargestFile$"
            order = 11
        }
        "-FileSizeGreaterThan" = {
            set_if = {{
                var str = macro("$IcingaCheckDirectory_String_FileSizeGreaterThan$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "String that expects input format like '20MB', which translates to the filze size 20 MB. Allowed units: B, KB, MB, GB, TB.  Thereby all files with a size of 20 MB or larger are considered within the check."
            value = {{
                var str = macro("$IcingaCheckDirectory_String_FileSizeGreaterThan$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 20
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckDirectory' "
            order = 0
        }
        "-WarningAverageFile" = {
            description = "Checks the resulting file count of the provided filters and input and returns warning for the provided threshold.  Follows the Icinga plugin threshold guidelines."
            value = "$IcingaCheckDirectory_Object_WarningAverageFile$"
            order = 12
        }
        "-WarningLargestFile" = {
            description = "Checks the largest file size found for the given filters and input and returns warning for the provided threshold.  Follows the Icinga plugin threshold guidelines."
            value = "$IcingaCheckDirectory_Object_WarningLargestFile$"
            order = 10
        }
        "-CreationYoungerThan" = {
            set_if = {{
                var str = macro("$IcingaCheckDirectory_String_CreationYoungerThan$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "String that expects input format like '20d', which translates to 20 days. Allowed units: ms, s, m, h, d, w, M, y.  Thereby all files which have a creation date younger then 20 days are considered within the check."
            value = {{
                var str = macro("$IcingaCheckDirectory_String_CreationYoungerThan$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 19
        }
        "-Warning" = {
            description = "Checks the resulting file count of the provided filters and input and returns warning for the provided threshold.  Follows the Icinga plugin threshold guidelines."
            value = "$IcingaCheckDirectory_Object_Warning$"
            order = 5
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckDirectory_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckDirectory_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckDirectory_Int32_Verbosity$"
            order = 22
        }
        "-ChangeTimeEqual" = {
            set_if = {{
                var str = macro("$IcingaCheckDirectory_String_ChangeTimeEqual$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "String that expects input format like '20d', which translates to 20 days. Allowed units: ms, s, m, h, d, w, M, y.  Thereby all files which have been changed 20 days ago are considered within the check."
            value = {{
                var str = macro("$IcingaCheckDirectory_String_ChangeTimeEqual$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 14
        }
        "-CountFolderAsFile" = {
            set_if = "$IcingaCheckDirectory_Switchparameter_CountFolderAsFile$"
            order = 99
        }
        "-WarningTotalSize" = {
            description = "Checks the total folder size of all files of the provided filters and input and returns warning for the provided threshold.  Follows the Icinga plugin threshold guidelines."
            value = "$IcingaCheckDirectory_Object_WarningTotalSize$"
            order = 6
        }
        "-CriticalSmallestFile" = {
            description = "Checks the smallest file size found for the given filters and input and returns critical for the provided threshold.  Follows the Icinga plugin threshold guidelines."
            value = "$IcingaCheckDirectory_Object_CriticalSmallestFile$"
            order = 9
        }
        "-Path" = {
            set_if = {{
                var str = macro("$IcingaCheckDirectory_String_Path$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Used to specify a path. e.g. 'C:\\Users\\Icinga\\Downloads'"
            value = {{
                var str = macro("$IcingaCheckDirectory_String_Path$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 2
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckDirectory_Switchparameter_NoPerfData$"
            order = 99
        }
        "-ChangeOlderThan" = {
            set_if = {{
                var str = macro("$IcingaCheckDirectory_String_ChangeOlderThan$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "String that expects input format like '20d', which translates to 20 days. Allowed units: ms, s, m, h, d, w, M, y.  Thereby all files which have a change date older then 20 days are considered within the check."
            value = {{
                var str = macro("$IcingaCheckDirectory_String_ChangeOlderThan$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 16
        }
        "-CriticalTotalSize" = {
            description = "Checks the total folder size of all files of the provided filters and input and returns critical for the provided threshold.  Follows the Icinga plugin threshold guidelines."
            value = "$IcingaCheckDirectory_Object_CriticalTotalSize$"
            order = 7
        }
        "-Critical" = {
            description = "Checks the resulting file count of the provided filters and input and returns critical for the provided threshold.  Follows the Icinga plugin threshold guidelines."
            value = "$IcingaCheckDirectory_Object_Critical$"
            order = 4
        }
        "-CriticalAverageFile" = {
            description = "Checks the average file size found for the given filters and input and returns critical for the provided threshold.  Follows the Icinga plugin threshold guidelines."
            value = "$IcingaCheckDirectory_Object_CriticalAverageFile$"
            order = 13
        }
        "-FileSizeSmallerThan" = {
            set_if = {{
                var str = macro("$IcingaCheckDirectory_String_FileSizeSmallerThan$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "String that expects input format like '5MB', which translates to the filze size 5 MB. Allowed units: B, KB, MB, GB, TB.  Thereby all files with a size of 5 MB or less are considered within the check."
            value = {{
                var str = macro("$IcingaCheckDirectory_String_FileSizeSmallerThan$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 21
        }
        "-CreationTimeEqual" = {
            set_if = {{
                var str = macro("$IcingaCheckDirectory_String_CreationTimeEqual$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "String that expects input format like '20d', which translates to 20 days. Allowed units: ms, s, m, h, d, w, M, y.  Thereby all files which have been created 20 days ago are considered within the check."
            value = {{
                var str = macro("$IcingaCheckDirectory_String_CreationTimeEqual$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 17
        }
        "-FileNames" = {
            description = "Used to specify an array of filenames or expressions to match against results to filter for specific files.  e.g '*.txt', '*.sql', finds all files ending with .txt and .sql"
            value = {{
                var arr = macro("$IcingaCheckDirectory_Array_FileNames$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
        "-WarningSmallestFile" = {
            description = "Checks the smallest file size found for the given filters and input and returns warning for the provided threshold.  Follows the Icinga plugin threshold guidelines."
            value = "$IcingaCheckDirectory_Object_WarningSmallestFile$"
            order = 8
        }
        "-CreationOlderThan" = {
            set_if = {{
                var str = macro("$IcingaCheckDirectory_String_CreationOlderThan$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "String that expects input format like '20d', which translates to 20 days. Allowed units: ms, s, m, h, d, w, M, y.  Thereby all files which have a creation date older then 20 days are considered within the check."
            value = {{
                var str = macro("$IcingaCheckDirectory_String_CreationOlderThan$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 18
        }
        "-ChangeYoungerThan" = {
            set_if = {{
                var str = macro("$IcingaCheckDirectory_String_ChangeYoungerThan$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "String that expects input format like '20d', which translates to 20 days. Allowed units: ms, s, m, h, d, w, M, y.  Thereby all files which have a change date younger then 20 days are considered within the check."
            value = {{
                var str = macro("$IcingaCheckDirectory_String_ChangeYoungerThan$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 15
        }
        "-ShowFileList" = {
            set_if = "$IcingaCheckDirectory_Switchparameter_ShowFileList$"
            order = 99
        }
        "-Recurse" = {
            set_if = "$IcingaCheckDirectory_Switchparameter_Recurse$"
            order = 99
        }
    }
    vars.IcingaCheckDirectory_Switchparameter_CountFolderAsFile = false
    vars.ifw_api_arguments = {
        "CreationOlderThan" = {
            value = "$IcingaCheckDirectory_String_CreationOlderThan$"
        }
        "WarningAverageFile" = {
            value = "$IcingaCheckDirectory_Object_WarningAverageFile$"
        }
        "CriticalAverageFile" = {
            value = "$IcingaCheckDirectory_Object_CriticalAverageFile$"
        }
        "WarningLargestFile" = {
            value = "$IcingaCheckDirectory_Object_WarningLargestFile$"
        }
        "CriticalLargestFile" = {
            value = "$IcingaCheckDirectory_Object_CriticalLargestFile$"
        }
        "WarningSmallestFile" = {
            value = "$IcingaCheckDirectory_Object_WarningSmallestFile$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckDirectory_Switchparameter_NoPerfData$"
        }
        "ChangeYoungerThan" = {
            value = "$IcingaCheckDirectory_String_ChangeYoungerThan$"
        }
        "CountFolderAsFile" = {
            set_if = "$IcingaCheckDirectory_Switchparameter_CountFolderAsFile$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckDirectory_String_ThresholdInterval$"
        }
        "CriticalSmallestFile" = {
            value = "$IcingaCheckDirectory_Object_CriticalSmallestFile$"
        }
        "CriticalTotalSize" = {
            value = "$IcingaCheckDirectory_Object_CriticalTotalSize$"
        }
        "FileSizeGreaterThan" = {
            value = "$IcingaCheckDirectory_String_FileSizeGreaterThan$"
        }
        "WarningTotalSize" = {
            value = "$IcingaCheckDirectory_Object_WarningTotalSize$"
        }
        "ChangeTimeEqual" = {
            value = "$IcingaCheckDirectory_String_ChangeTimeEqual$"
        }
        "FileSizeSmallerThan" = {
            value = "$IcingaCheckDirectory_String_FileSizeSmallerThan$"
        }
        "Warning" = {
            value = "$IcingaCheckDirectory_Object_Warning$"
        }
        "Critical" = {
            value = "$IcingaCheckDirectory_Object_Critical$"
        }
        "ChangeOlderThan" = {
            value = "$IcingaCheckDirectory_String_ChangeOlderThan$"
        }
        "ShowFileList" = {
            set_if = "$IcingaCheckDirectory_Switchparameter_ShowFileList$"
        }
        "FileNames" = {
            value = "$IcingaCheckDirectory_Array_FileNames$"
        }
        "CreationTimeEqual" = {
            value = "$IcingaCheckDirectory_String_CreationTimeEqual$"
        }
        "Verbosity" = {
            value = "$IcingaCheckDirectory_Int32_Verbosity$"
        }
        "Path" = {
            value = "$IcingaCheckDirectory_String_Path$"
        }
        "CreationYoungerThan" = {
            value = "$IcingaCheckDirectory_String_CreationYoungerThan$"
        }
        "Recurse" = {
            set_if = "$IcingaCheckDirectory_Switchparameter_Recurse$"
        }
    }
    vars.IcingaCheckDirectory_Switchparameter_ShowFileList = false
    vars.ifw_api_command = "invoke-icingacheckdirectory"
    vars.IcingaCheckDirectory_Switchparameter_NoPerfData = false
    vars.IcingaCheckDirectory_Switchparameter_Recurse = false
}
