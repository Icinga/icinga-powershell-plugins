object CheckCommand "Invoke-IcingaCheckMPIO" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckMPIO' "
            order = 0
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckMPIO_Object_Verbosity$"
            order = 4
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckMPIO_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckMPIO_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold for the number of path defined. Use for example 8: for alerting for less than 8 MPIO paths available"
            value = "$IcingaCheckMPIO_Object_Warning$"
            order = 2
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold for the number of path defined. Use for example 6: for alerting for less than 6 MPIO paths available"
            value = "$IcingaCheckMPIO_Object_Critical$"
            order = 3
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckMPIO_Switchparameter_NoPerfData$"
            order = 99
        }
    }
    vars.IcingaCheckMPIO_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "Critical" = {
            value = "$IcingaCheckMPIO_Object_Critical$"
        }
        "Warning" = {
            value = "$IcingaCheckMPIO_Object_Warning$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckMPIO_String_ThresholdInterval$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckMPIO_Switchparameter_NoPerfData$"
        }
        "Verbosity" = {
            value = "$IcingaCheckMPIO_Object_Verbosity$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckmpio"
}

object CheckCommand "Invoke-IcingaCheckUsers" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckUsers' "
            order = 0
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckUsers_Int32_Verbosity$"
            order = 5
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckUsers_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckUsers_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold. In this case an integer value."
            value = "$IcingaCheckUsers_Object_Warning$"
            order = 3
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold. In this case an integer value."
            value = "$IcingaCheckUsers_Object_Critical$"
            order = 4
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckUsers_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Username" = {
            description = "Used to specify an array of usernames to match against. e.g 'Administrator', 'Icinga'"
            value = {{
                var arr = macro("$IcingaCheckUsers_Array_Username$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
    }
    vars.IcingaCheckUsers_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "Username" = {
            value = "$IcingaCheckUsers_Array_Username$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckUsers_String_ThresholdInterval$"
        }
        "Critical" = {
            value = "$IcingaCheckUsers_Object_Critical$"
        }
        "Warning" = {
            value = "$IcingaCheckUsers_Object_Warning$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckUsers_Switchparameter_NoPerfData$"
        }
        "Verbosity" = {
            value = "$IcingaCheckUsers_Int32_Verbosity$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckusers"
}

object CheckCommand "Invoke-IcingaCheckCertificate" {
    import "PowerShell Base"

    arguments += {
        "-CertStorePath" = {
            description = "Used to specify which path within the CertStore should be checked."
            value = "$IcingaCheckCertificate_Object_CertStorePath$"
            order = 9
        }
        "-CriticalEnd" = {
            description = "Used to specify a Critical range for the end date of an certificate. In this case a string. Allowed units include: ms, s, m, h, d, w, M, y"
            value = "$IcingaCheckCertificate_Object_CriticalEnd$"
            order = 4
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckCertificate_Int32_Verbosity$"
            order = 12
        }
        "-CertSubject" = {
            description = "Used to specify an array of Subjects, which are used to determine what certificate to check, within the CertStore."
            value = {{
                var arr = macro("$IcingaCheckCertificate_Array_CertSubject$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 7
        }
        "-IgnoreEmpty" = {
            set_if = "$IcingaCheckCertificate_Switchparameter_IgnoreEmpty$"
            order = 99
        }
        "-WarningEnd" = {
            description = "Used to specify a Warning range for the end date of an certificate. In this case a string. Allowed units include: ms, s, m, h, d, w, M, y"
            value = "$IcingaCheckCertificate_Object_WarningEnd$"
            order = 3
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckCertificate' "
            order = 0
        }
        "-CriticalStart" = {
            description = "Used to specify a date. The start date of the certificate has to be past the date specified, otherwise the check results in critical. Use carefully. Use format like: 'yyyy-MM-dd'"
            value = "$IcingaCheckCertificate_Object_CriticalStart$"
            order = 2
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckCertificate_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckCertificate_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-CertStore" = {
            set_if = {{
                var str = macro("$IcingaCheckCertificate_String_CertStore$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Used to specify which CertStore to check. Valid choices are 'None', '*', 'LocalMachine', 'CurrentUser'. Use 'None' if you do not want to check the certificate store (Default)"
            value = {{
                var str = macro("$IcingaCheckCertificate_String_CertStore$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 5
        }
        "-Trusted" = {
            set_if = "$IcingaCheckCertificate_Switchparameter_Trusted$"
            order = 99
        }
        "-ExcludePattern" = {
            description = "Used to specify an array of exclusions, tested against Subject, Subject Alternative Name, Issuer and Thumbprint."
            value = {{
                var arr = macro("$IcingaCheckCertificate_Array_ExcludePattern$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 8
        }
        "-CertPaths" = {
            description = "Used to specify an array of paths on your system, where certificate files are. Use with CertName."
            value = {{
                var arr = macro("$IcingaCheckCertificate_Array_CertPaths$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 10
        }
        "-CertThumbprint" = {
            description = "Used to specify an array of Thumbprints, which are used to determine what certificate to check, within the CertStore."
            value = {{
                var arr = macro("$IcingaCheckCertificate_Array_CertThumbprint$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 6
        }
        "-Recurse" = {
            set_if = "$IcingaCheckCertificate_Switchparameter_Recurse$"
            order = 99
        }
        "-CertName" = {
            description = "Used to specify an array of certificate names of certificate files to check. Use with CertPaths."
            value = {{
                var arr = macro("$IcingaCheckCertificate_Array_CertName$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 11
        }
    }
    vars.IcingaCheckCertificate_Switchparameter_IgnoreEmpty = false
    vars.IcingaCheckCertificate_Switchparameter_Recurse = false
    vars.ifw_api_arguments = {
        "CertStorePath" = {
            value = "$IcingaCheckCertificate_Object_CertStorePath$"
        }
        "CertPaths" = {
            value = "$IcingaCheckCertificate_Array_CertPaths$"
        }
        "CertName" = {
            value = "$IcingaCheckCertificate_Array_CertName$"
        }
        "CriticalEnd" = {
            value = "$IcingaCheckCertificate_Object_CriticalEnd$"
        }
        "Trusted" = {
            set_if = "$IcingaCheckCertificate_Switchparameter_Trusted$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckCertificate_String_ThresholdInterval$"
        }
        "CertThumbprint" = {
            value = "$IcingaCheckCertificate_Array_CertThumbprint$"
        }
        "CertStore" = {
            value = "$IcingaCheckCertificate_String_CertStore$"
        }
        "CertSubject" = {
            value = "$IcingaCheckCertificate_Array_CertSubject$"
        }
        "IgnoreEmpty" = {
            set_if = "$IcingaCheckCertificate_Switchparameter_IgnoreEmpty$"
        }
        "Verbosity" = {
            value = "$IcingaCheckCertificate_Int32_Verbosity$"
        }
        "CriticalStart" = {
            value = "$IcingaCheckCertificate_Object_CriticalStart$"
        }
        "WarningEnd" = {
            value = "$IcingaCheckCertificate_Object_WarningEnd$"
        }
        "ExcludePattern" = {
            value = "$IcingaCheckCertificate_Array_ExcludePattern$"
        }
        "Recurse" = {
            set_if = "$IcingaCheckCertificate_Switchparameter_Recurse$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckcertificate"
    vars.IcingaCheckCertificate_Switchparameter_Trusted = false
}

object CheckCommand "Invoke-IcingaCheckMemory" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckMemory' "
            order = 0
        }
        "-Verbosity" = {
            value = "$IcingaCheckMemory_Int32_Verbosity$"
            order = 8
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckMemory_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckMemory_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-PageFileCritical" = {
            description = "Allows to check the used page file and compare it against a size value, like '200MB' This is using the default Icinga threshold handling. It is possible to enter e.g. 10% as threshold value if you want a percentage comparison."
            value = "$IcingaCheckMemory_Object_PageFileCritical$"
            order = 5
        }
        "-ExcludePageFile" = {
            description = "Allows to filter for page files being excluded for the check"
            value = {{
                var arr = macro("$IcingaCheckMemory_Array_ExcludePageFile$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 7
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold. In this case an string value. The string has to be like, '20B', '20KB', '20MB', '20GB', '20TB', '20PB' This is using the default Icinga threshold handling. It is possible to enter e.g. 10% as threshold value if you want a percentage comparison."
            value = "$IcingaCheckMemory_Object_Warning$"
            order = 2
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold. In this case an string value. The string has to be like, '20B', '20KB', '20MB', '20GB', '20TB', '20PB' This is using the default Icinga threshold handling. It is possible to enter e.g. 10% as threshold value if you want a percentage comparison."
            value = "$IcingaCheckMemory_Object_Critical$"
            order = 3
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckMemory_Switchparameter_NoPerfData$"
            order = 99
        }
        "-PageFileWarning" = {
            description = "Allows to check the used page file and compare it against a size value, like '200MB' This is using the default Icinga threshold handling.  It is possible to enter e.g. 10% as threshold value if you want a percentage comparison."
            value = "$IcingaCheckMemory_Object_PageFileWarning$"
            order = 4
        }
        "-IncludePageFile" = {
            description = "Allows to filter for page files being included for the check"
            value = {{
                var arr = macro("$IcingaCheckMemory_Array_IncludePageFile$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 6
        }
    }
    vars.IcingaCheckMemory_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "Critical" = {
            value = "$IcingaCheckMemory_Object_Critical$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckMemory_String_ThresholdInterval$"
        }
        "PageFileWarning" = {
            value = "$IcingaCheckMemory_Object_PageFileWarning$"
        }
        "PageFileCritical" = {
            value = "$IcingaCheckMemory_Object_PageFileCritical$"
        }
        "IncludePageFile" = {
            value = "$IcingaCheckMemory_Array_IncludePageFile$"
        }
        "Warning" = {
            value = "$IcingaCheckMemory_Object_Warning$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckMemory_Switchparameter_NoPerfData$"
        }
        "ExcludePageFile" = {
            value = "$IcingaCheckMemory_Array_ExcludePageFile$"
        }
        "Verbosity" = {
            value = "$IcingaCheckMemory_Int32_Verbosity$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckmemory"
}

object CheckCommand "Invoke-IcingaCheckPartitionSpace" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckPartitionSpace' "
            order = 0
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckPartitionSpace_Int32_Verbosity$"
            order = 6
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckPartitionSpace_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckPartitionSpace_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-IgnoreEmptyChecks" = {
            set_if = "$IcingaCheckPartitionSpace_Switchparameter_IgnoreEmptyChecks$"
            order = 99
        }
        "-Include" = {
            description = "Used to specify an array of partitions to be included. If not set, the check expects that all not excluded partitions should be checked. e.g. 'C:','D:'"
            value = {{
                var arr = macro("$IcingaCheckPartitionSpace_Array_Include$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 4
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold. This can either be a byte-value type like '10GB' or a %-value, like '10%'"
            value = "$IcingaCheckPartitionSpace_Object_Warning$"
            order = 2
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold. This can either be a byte-value type like '10GB' or a %-value, like '10%'"
            value = "$IcingaCheckPartitionSpace_Object_Critical$"
            order = 3
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckPartitionSpace_Switchparameter_NoPerfData$"
            order = 99
        }
        "-CheckUsedSpace" = {
            set_if = "$IcingaCheckPartitionSpace_Switchparameter_CheckUsedSpace$"
            order = 99
        }
        "-Exclude" = {
            description = "Used to specify an array of partitions to be excluded. e.g. 'C:','D:'"
            value = {{
                var arr = macro("$IcingaCheckPartitionSpace_Array_Exclude$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 5
        }
        "-SkipUnknown" = {
            set_if = "$IcingaCheckPartitionSpace_Switchparameter_SkipUnknown$"
            order = 99
        }
    }
    vars.ifw_api_arguments = {
        "Verbosity" = {
            value = "$IcingaCheckPartitionSpace_Int32_Verbosity$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckPartitionSpace_String_ThresholdInterval$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckPartitionSpace_Switchparameter_NoPerfData$"
        }
        "Critical" = {
            value = "$IcingaCheckPartitionSpace_Object_Critical$"
        }
        "Exclude" = {
            value = "$IcingaCheckPartitionSpace_Array_Exclude$"
        }
        "Warning" = {
            value = "$IcingaCheckPartitionSpace_Object_Warning$"
        }
        "IgnoreEmptyChecks" = {
            set_if = "$IcingaCheckPartitionSpace_Switchparameter_IgnoreEmptyChecks$"
        }
        "SkipUnknown" = {
            set_if = "$IcingaCheckPartitionSpace_Switchparameter_SkipUnknown$"
        }
        "CheckUsedSpace" = {
            set_if = "$IcingaCheckPartitionSpace_Switchparameter_CheckUsedSpace$"
        }
        "Include" = {
            value = "$IcingaCheckPartitionSpace_Array_Include$"
        }
    }
    vars.IcingaCheckPartitionSpace_Switchparameter_SkipUnknown = false
    vars.IcingaCheckPartitionSpace_Switchparameter_IgnoreEmptyChecks = false
    vars.IcingaCheckPartitionSpace_Switchparameter_CheckUsedSpace = false
    vars.IcingaCheckPartitionSpace_Switchparameter_NoPerfData = false
    vars.ifw_api_command = "invoke-icingacheckpartitionspace"
}

object CheckCommand "Invoke-IcingaCheckHTTPStatus" {
    import "PowerShell Base"

    arguments += {
        "-StatusCode" = {
            value = {{
                var arr = macro("$IcingaCheckHTTPStatus_Array_StatusCode$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 14
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckHTTPStatus_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckHTTPStatus_Int32_Verbosity$"
            order = 16
        }
        "-Content" = {
            description = "Used to specify an array of regex-match-strings to match against the content of the webrequest response."
            value = {{
                var arr = macro("$IcingaCheckHTTPStatus_Array_Content$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 13
        }
        "-ProxyUsername" = {
            set_if = {{
                var str = macro("$IcingaCheckHTTPStatus_String_ProxyUsername$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Used to specify a proxy username as string to authenticate with. Use with: -ProxyPassword & -ProxyServer"
            value = {{
                var str = macro("$IcingaCheckHTTPStatus_String_ProxyUsername$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 10
        }
        "-Username" = {
            set_if = {{
                var str = macro("$IcingaCheckHTTPStatus_String_Username$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Used to specify a username as string to authenticate with. Authentication is only possible with 'https://'. Use with: -Password"
            value = {{
                var str = macro("$IcingaCheckHTTPStatus_String_Username$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 8
        }
        "-AddOutputContent" = {
            set_if = "$IcingaCheckHTTPStatus_Switchparameter_AddOutputContent$"
            order = 99
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckHTTPStatus' "
            order = 0
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckHTTPStatus_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckHTTPStatus_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Negate" = {
            set_if = "$IcingaCheckHTTPStatus_Switchparameter_Negate$"
            order = 99
        }
        "-Password" = {
            description = "Used to specify a password as securestring to authenticate with. Authentication is only possible with 'https://'.Use with: -Username"
            value = "(ConvertTo-IcingaSecureString '$IcingaCheckHTTPStatus_Securestring_Password$')"
            order = 9
        }
        "-Warning" = {
            description = "Used to specify the webrequest response time warning threshold in seconds, everything past that threshold is considered a WARNING."
            value = "$IcingaCheckHTTPStatus_Object_Warning$"
            order = 2
        }
        "-ProxyServer" = {
            set_if = {{
                var str = macro("$IcingaCheckHTTPStatus_String_ProxyServer$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Used to specify a proxy server as string to authenticate with."
            value = {{
                var str = macro("$IcingaCheckHTTPStatus_String_ProxyServer$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 12
        }
        "-ProxyPassword" = {
            description = "Used to specify a proxy password as securestring to authenticate with. Use with: -ProxyUsername & -ProxyServer"
            value = "(ConvertTo-IcingaSecureString '$IcingaCheckHTTPStatus_Securestring_ProxyPassword$')"
            order = 11
        }
        "-Minimum" = {
            value = "$IcingaCheckHTTPStatus_Int32_Minimum$"
            order = 15
        }
        "-VHost" = {
            set_if = {{
                var str = macro("$IcingaCheckHTTPStatus_String_VHost$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Used to specify a VHost as string."
            value = {{
                var str = macro("$IcingaCheckHTTPStatus_String_VHost$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 5
        }
        "-Critical" = {
            description = "Used to specify the webrequest response time critical threshold in seconds, everything past that threshold is considered a CRITICAL."
            value = "$IcingaCheckHTTPStatus_Object_Critical$"
            order = 3
        }
        "-Headers" = {
            description = "Used to specify headers as Array. Like: -Headers 'Accept:application/json'"
            value = {{
                var arr = macro("$IcingaCheckHTTPStatus_Array_Headers$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 6
        }
        "-Timeout" = {
            description = "Used to specify the timeout in seconds of the webrequest as integer. The default is 10 for 10 seconds."
            value = "$IcingaCheckHTTPStatus_Int32_Timeout$"
            order = 7
        }
        "-Url" = {
            description = "Used to specify the URL of the host to check http as string. Use 'http://' or 'https://' to actively chose a protocol. Likewise ':80' or any other port number to specify a port, etc."
            value = {{
                var arr = macro("$IcingaCheckHTTPStatus_Array_Url$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 4
        }
        "-ConnectionErrAsCrit" = {
            set_if = "$IcingaCheckHTTPStatus_Switchparameter_ConnectionErrAsCrit$"
            order = 99
        }
    }
    vars.IcingaCheckHTTPStatus_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "Url" = {
            value = "$IcingaCheckHTTPStatus_Array_Url$"
        }
        "Verbosity" = {
            value = "$IcingaCheckHTTPStatus_Int32_Verbosity$"
        }
        "Timeout" = {
            value = "$IcingaCheckHTTPStatus_Int32_Timeout$"
        }
        "Username" = {
            value = "$IcingaCheckHTTPStatus_String_Username$"
        }
        "Password" = {
            value = "$IcingaCheckHTTPStatus_Securestring_Password$"
        }
        "Negate" = {
            set_if = "$IcingaCheckHTTPStatus_Switchparameter_Negate$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckHTTPStatus_String_ThresholdInterval$"
        }
        "VHost" = {
            value = "$IcingaCheckHTTPStatus_String_VHost$"
        }
        "Content" = {
            value = "$IcingaCheckHTTPStatus_Array_Content$"
        }
        "AddOutputContent" = {
            set_if = "$IcingaCheckHTTPStatus_Switchparameter_AddOutputContent$"
        }
        "ProxyUsername" = {
            value = "$IcingaCheckHTTPStatus_String_ProxyUsername$"
        }
        "Warning" = {
            value = "$IcingaCheckHTTPStatus_Object_Warning$"
        }
        "Headers" = {
            value = "$IcingaCheckHTTPStatus_Array_Headers$"
        }
        "Critical" = {
            value = "$IcingaCheckHTTPStatus_Object_Critical$"
        }
        "StatusCode" = {
            value = "$IcingaCheckHTTPStatus_Array_StatusCode$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckHTTPStatus_Switchparameter_NoPerfData$"
        }
        "ProxyServer" = {
            value = "$IcingaCheckHTTPStatus_String_ProxyServer$"
        }
        "ConnectionErrAsCrit" = {
            set_if = "$IcingaCheckHTTPStatus_Switchparameter_ConnectionErrAsCrit$"
        }
        "Minimum" = {
            value = "$IcingaCheckHTTPStatus_Int32_Minimum$"
        }
        "ProxyPassword" = {
            value = "$IcingaCheckHTTPStatus_Securestring_ProxyPassword$"
        }
    }
    vars.IcingaCheckHTTPStatus_Switchparameter_AddOutputContent = false
    vars.IcingaCheckHTTPStatus_Switchparameter_ConnectionErrAsCrit = false
    vars.ifw_api_command = "invoke-icingacheckhttpstatus"
    vars.IcingaCheckHTTPStatus_Switchparameter_Negate = false
}

object CheckCommand "Invoke-IcingaCheckNLA" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckNLA' "
            order = 0
        }
        "-Profile" = {
            set_if = {{
                var str = macro("$IcingaCheckNLA_String_Profile$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Used to specify the profile to check. Available profiles are 'DomainAuthenticated', 'Public', 'Private'"
            value = {{
                var str = macro("$IcingaCheckNLA_String_Profile$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 2
        }
        "-NICs" = {
            description = "Used to specify the NICs where to check the filewall profile. When not presented every nic which is active will be checked"
            value = {{
                var arr = macro("$IcingaCheckNLA_Array_NICs$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 4
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckNLA_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckNLA_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckNLA_Int32_Verbosity$"
            order = 3
        }
    }
    vars.ifw_api_arguments = {
        "Profile" = {
            value = "$IcingaCheckNLA_String_Profile$"
        }
        "NICs" = {
            value = "$IcingaCheckNLA_Array_NICs$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckNLA_String_ThresholdInterval$"
        }
        "Verbosity" = {
            value = "$IcingaCheckNLA_Int32_Verbosity$"
        }
    }
    vars.ifw_api_command = "invoke-icingachecknla"
}

object CheckCommand "Invoke-IcingaCheckBiosSerial" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckBiosSerial' "
            order = 0
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckBiosSerial_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckBiosSerial_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
    }
    vars.ifw_api_arguments = {
        "ThresholdInterval" = {
            value = "$IcingaCheckBiosSerial_String_ThresholdInterval$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckbiosserial"
}

object CheckCommand "Invoke-IcingaCheckEventlog" {
    import "PowerShell Base"

    arguments += {
        "-Before" = {
            description = "Used to specify time data of which point the plugin should stop considering event logs. You can either use a fixed date and time like '2021/01/30 12:00:00', a fixed day '2021/01/30' or use more dynamic approaches like '1d', '10h' and so on.  By using '2h' for example, log files of the last 2 hours will be ignored. Please ensure to manually set the `-After` argument and ensure you go back further in time with the `-After` argument than the `-Before` argument.  Allowed units: ms, s, m, h, d, w, M, y"
            value = "$IcingaCheckEventlog_Object_Before$"
            order = 16
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckEventlog_Switchparameter_NoPerfData$"
            order = 99
        }
        "-IncludeMessage" = {
            description = "Used to specify an array of messages within the eventlog to be included."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_IncludeMessage$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 11
        }
        "-IncludeSource" = {
            description = "Used to specify an array of message sources within the eventlog to be included."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_IncludeSource$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 13
        }
        "-After" = {
            description = "Used to specify time data of which point the plugin should start to read event logs from. You can either use a fixed date and time like '2021/01/30 12:00:00', a fixed day '2021/01/30' or use more dynamic approaches like '1d', '10h' and so on.  Allowed units: ms, s, m, h, d, w, M, y"
            value = "$IcingaCheckEventlog_Object_After$"
            order = 15
        }
        "-IncludeEventId" = {
            description = "Used to specify an array of events identified by their id to be included."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_IncludeEventId$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 5
        }
        "-LogName" = {
            set_if = {{
                var str = macro("$IcingaCheckEventlog_String_LogName$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Used to specify a certain log."
            value = {{
                var str = macro("$IcingaCheckEventlog_String_LogName$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 4
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckEventlog' "
            order = 0
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckEventlog_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckEventlog_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-ExcludeSource" = {
            description = "Used to specify an array of message sources within the eventlog to be excluded."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ExcludeSource$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 14
        }
        "-ExcludeUsername" = {
            description = "Used to specify an array of usernames within the eventlog to be excluded."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ExcludeUsername$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 8
        }
        "-ExcludeEntryType" = {
            description = "Used to specify an array of entry types within the eventlog to be excluded. Please note that `SuccessAudit` and `FailureAudit` only apply to the `Security` EventLog."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ExcludeEntryType$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 10
        }
        "-IncludeEntryType" = {
            description = "Used to specify an array of entry types within the eventlog to be included. Please note that `SuccessAudit` and `FailureAudit` only apply to the `Security` EventLog."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_IncludeEntryType$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 9
        }
        "-MaxEntries" = {
            description = "Allows to limit the amount of log entries fetched by Get-WinEvent, to increase performance and reduce system load impact Should match the average amount of log files written for the intended time range filtered"
            value = "$IcingaCheckEventlog_Int32_MaxEntries$"
            order = 17
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckEventlog_Int32_Verbosity$"
            order = 18
        }
        "-ExcludeEventId" = {
            description = "Used to specify an array of events identified by their id to be excluded."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ExcludeEventId$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 6
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold."
            value = "$IcingaCheckEventlog_Object_Critical$"
            order = 3
        }
        "-DisableTimeCache" = {
            set_if = "$IcingaCheckEventlog_Switchparameter_DisableTimeCache$"
            order = 99
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold."
            value = "$IcingaCheckEventlog_Object_Warning$"
            order = 2
        }
        "-IncludeUsername" = {
            description = "Used to specify an array of usernames within the eventlog to be included."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_IncludeUsername$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 7
        }
        "-ExcludeMessage" = {
            description = "Used to specify an array of messages within the eventlog to be excluded."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ExcludeMessage$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 12
        }
    }
    vars.IcingaCheckEventlog_Switchparameter_DisableTimeCache = false
    vars.ifw_api_arguments = {
        "IncludeEventId" = {
            value = "$IcingaCheckEventlog_Array_IncludeEventId$"
        }
        "DisableTimeCache" = {
            set_if = "$IcingaCheckEventlog_Switchparameter_DisableTimeCache$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckEventlog_String_ThresholdInterval$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckEventlog_Switchparameter_NoPerfData$"
        }
        "ExcludeEventId" = {
            value = "$IcingaCheckEventlog_Array_ExcludeEventId$"
        }
        "Before" = {
            value = "$IcingaCheckEventlog_Object_Before$"
        }
        "IncludeEntryType" = {
            value = "$IcingaCheckEventlog_Array_IncludeEntryType$"
        }
        "LogName" = {
            value = "$IcingaCheckEventlog_String_LogName$"
        }
        "ExcludeEntryType" = {
            value = "$IcingaCheckEventlog_Array_ExcludeEntryType$"
        }
        "IncludeSource" = {
            value = "$IcingaCheckEventlog_Array_IncludeSource$"
        }
        "Warning" = {
            value = "$IcingaCheckEventlog_Object_Warning$"
        }
        "MaxEntries" = {
            value = "$IcingaCheckEventlog_Int32_MaxEntries$"
        }
        "Critical" = {
            value = "$IcingaCheckEventlog_Object_Critical$"
        }
        "ExcludeUsername" = {
            value = "$IcingaCheckEventlog_Array_ExcludeUsername$"
        }
        "After" = {
            value = "$IcingaCheckEventlog_Object_After$"
        }
        "IncludeUsername" = {
            value = "$IcingaCheckEventlog_Array_IncludeUsername$"
        }
        "ExcludeSource" = {
            value = "$IcingaCheckEventlog_Array_ExcludeSource$"
        }
        "IncludeMessage" = {
            value = "$IcingaCheckEventlog_Array_IncludeMessage$"
        }
        "ExcludeMessage" = {
            value = "$IcingaCheckEventlog_Array_ExcludeMessage$"
        }
        "Verbosity" = {
            value = "$IcingaCheckEventlog_Int32_Verbosity$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckeventlog"
    vars.IcingaCheckEventlog_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckDiskHealth" {
    import "PowerShell Base"

    arguments += {
        "-DiskReadByteSecWarning" = {
            description = "Warning threshold for disk Read Bytes/sec is the rate at which bytes are transferred from the disk during read operations."
            value = "$IcingaCheckDiskHealth_Object_DiskReadByteSecWarning$"
            order = 14
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckDiskHealth' "
            order = 0
        }
        "-DiskWriteByteSecWarning" = {
            description = "Warning threshold for disk Write Bytes/sec is rate at which bytes are transferred to the disk during write operations."
            value = "$IcingaCheckDiskHealth_Object_DiskWriteByteSecWarning$"
            order = 16
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckDiskHealth_Switchparameter_NoPerfData$"
            order = 99
        }
        "-ExcludeDisk" = {
            description = "Specify the index id of disks you want to exclude from checks. Example 0, 1"
            value = {{
                var arr = macro("$IcingaCheckDiskHealth_Array_ExcludeDisk$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckDiskHealth_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckDiskHealth_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-DiskQueueAvgLenWarning" = {
            description = "Warning threshold for Avg. Disk Queue Length is the average number of both read and write requests that were queued for the selected disk during the sample interval."
            value = "$IcingaCheckDiskHealth_Object_DiskQueueAvgLenWarning$"
            order = 12
        }
        "-IncludeDisk" = {
            description = "Specify the index id of disks you want to include for checks. Example 0, 1"
            value = {{
                var arr = macro("$IcingaCheckDiskHealth_Array_IncludeDisk$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
        "-DiskQueueAvgLenCritical" = {
            description = "Critical threshold for Avg. Disk Queue Length is the average number of both read and write requests that were queued for the selected disk during the sample interval."
            value = "$IcingaCheckDiskHealth_Object_DiskQueueAvgLenCritical$"
            order = 13
        }
        "-DiskQueueLenWarning" = {
            description = "Warning threshold for current Disk Queue Length is the number of requests outstanding on the disk at the time the performance data is collected. It also includes requests in service at the time of the collection. This is a instantaneous snapshot, not an average over the time interval. Multi-spindle disk devices can have multiple requests that are active at one time, but other concurrent requests are awaiting service. This counter might reflect a transitory high or low queue length, but if there is a sustained load on the disk drive, it is likely that this will be consistently high. Requests experience delays proportional to the length of this queue minus the number of spindles on the disks. For good performance, this difference should average less than two."
            value = "$IcingaCheckDiskHealth_Object_DiskQueueLenWarning$"
            order = 10
        }
        "-IncludePartition" = {
            description = "Specify the partition drive letters for disks to include for checks. Example C:, D:"
            value = {{
                var arr = macro("$IcingaCheckDiskHealth_Array_IncludePartition$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 4
        }
        "-DiskAvgReadSecCritical" = {
            description = "Critical threshold for avg. Disk sec/Read is the average time, in seconds, of a read of data from the disk. If the threshold values are not in seconds, please enter a unit such as (ms, s, m, h, ...)"
            value = "$IcingaCheckDiskHealth_Object_DiskAvgReadSecCritical$"
            order = 21
        }
        "-DiskWriteSecCritical" = {
            description = "Critical threshold for disk Writes/sec is the rate of write operations on the disk."
            value = "$IcingaCheckDiskHealth_Object_DiskWriteSecCritical$"
            order = 9
        }
        "-IgnoreReadOnlyDisks" = {
            set_if = "$IcingaCheckDiskHealth_Switchparameter_IgnoreReadOnlyDisks$"
            order = 99
        }
        "-DiskAvgReadSecWarning" = {
            description = "Warning threshold for avg. Disk sec/Read is the average time, in seconds, of a read of data from the disk. If the threshold values are not in seconds, please enter a unit such as (ms, s, m, h, ...)"
            value = "$IcingaCheckDiskHealth_Object_DiskAvgReadSecWarning$"
            order = 20
        }
        "-DiskWriteByteSecCritical" = {
            description = "Critical threshold for disk Write Bytes/sec is rate at which bytes are transferred to the disk during write operations."
            value = "$IcingaCheckDiskHealth_Object_DiskWriteByteSecCritical$"
            order = 17
        }
        "-DiskAvgTransSecWarning" = {
            description = "Warning threshold for avg. Disk sec/Transfer is the time, in seconds, of the average disk transfer. If the threshold values are not in seconds, please enter a unit such as (ms, s, m, h, ...)"
            value = "$IcingaCheckDiskHealth_Object_DiskAvgTransSecWarning$"
            order = 18
        }
        "-DiskAvgWriteSecWarning" = {
            description = "Warning threshold for Avg. Disk sec/Write is the average time, in seconds, of a write of data to the disk. If the threshold values are not in seconds, please enter a unit such as (ms, s, m, h, ...)"
            value = "$IcingaCheckDiskHealth_Object_DiskAvgWriteSecWarning$"
            order = 22
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckDiskHealth_Int32_Verbosity$"
            order = 24
        }
        "-DiskReadSecWarning" = {
            description = "Warning threshold for disk Reads/sec is the rate of read operations on the disk."
            value = "$IcingaCheckDiskHealth_Object_DiskReadSecWarning$"
            order = 6
        }
        "-ExcludePartition" = {
            description = "Specify the partition drive letters for disks to exclude from checks. Example C:, D:"
            value = {{
                var arr = macro("$IcingaCheckDiskHealth_Array_ExcludePartition$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 5
        }
        "-DiskReadSecCritical" = {
            description = "Critical threshold for disk Reads/sec is the rate of read operations on the disk."
            value = "$IcingaCheckDiskHealth_Object_DiskReadSecCritical$"
            order = 7
        }
        "-CheckLogicalOnly" = {
            set_if = "$IcingaCheckDiskHealth_Switchparameter_CheckLogicalOnly$"
            order = 99
        }
        "-DiskReadByteSecCritical" = {
            description = "Critical threshold for disk Read Bytes/sec is the rate at which bytes are transferred from the disk during read operations."
            value = "$IcingaCheckDiskHealth_Object_DiskReadByteSecCritical$"
            order = 15
        }
        "-DiskAvgWriteSecCritical" = {
            description = "Critical threshold for Avg. Disk sec/Write is the average time, in seconds, of a write of data to the disk. If the threshold values are not in seconds, please enter a unit such as (ms, s, m, h, ...)"
            value = "$IcingaCheckDiskHealth_Object_DiskAvgWriteSecCritical$"
            order = 23
        }
        "-IgnoreOfflineDisks" = {
            set_if = "$IcingaCheckDiskHealth_Switchparameter_IgnoreOfflineDisks$"
            order = 99
        }
        "-DiskWriteSecWarning" = {
            description = "Warning threshold for disk Writes/sec is the rate of write operations on the disk."
            value = "$IcingaCheckDiskHealth_Object_DiskWriteSecWarning$"
            order = 8
        }
        "-DiskQueueLenCritical" = {
            description = "Critical threshold for current Disk Queue Length is the number of requests outstanding on the disk at the time the performance data is collected. It also includes requests in service at the time of the collection. This is a instantaneous snapshot, not an average over the time interval. Multi-spindle disk devices can have multiple requests that are active at one time, but other concurrent requests are awaiting service. This counter might reflect a transitory high or low queue length, but if there is a sustained load on the disk drive, it is likely that this will be consistently high. Requests experience delays proportional to the length of this queue minus the number of spindles on the disks. For good performance, this difference should average less than two."
            value = "$IcingaCheckDiskHealth_Object_DiskQueueLenCritical$"
            order = 11
        }
        "-DiskAvgTransSecCritical" = {
            description = "Critical threshold for avg. Disk sec/Transfer is the time, in seconds, of the average disk transfer. If the threshold values are not in seconds, please enter a unit such as (ms, s, m, h, ...)"
            value = "$IcingaCheckDiskHealth_Object_DiskAvgTransSecCritical$"
            order = 19
        }
    }
    vars.IcingaCheckDiskHealth_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "NoPerfData" = {
            set_if = "$IcingaCheckDiskHealth_Switchparameter_NoPerfData$"
        }
        "DiskAvgWriteSecCritical" = {
            value = "$IcingaCheckDiskHealth_Object_DiskAvgWriteSecCritical$"
        }
        "CheckLogicalOnly" = {
            set_if = "$IcingaCheckDiskHealth_Switchparameter_CheckLogicalOnly$"
        }
        "Verbosity" = {
            value = "$IcingaCheckDiskHealth_Int32_Verbosity$"
        }
        "DiskReadByteSecWarning" = {
            value = "$IcingaCheckDiskHealth_Object_DiskReadByteSecWarning$"
        }
        "IgnoreReadOnlyDisks" = {
            set_if = "$IcingaCheckDiskHealth_Switchparameter_IgnoreReadOnlyDisks$"
        }
        "DiskWriteByteSecWarning" = {
            value = "$IcingaCheckDiskHealth_Object_DiskWriteByteSecWarning$"
        }
        "DiskQueueLenCritical" = {
            value = "$IcingaCheckDiskHealth_Object_DiskQueueLenCritical$"
        }
        "ExcludeDisk" = {
            value = "$IcingaCheckDiskHealth_Array_ExcludeDisk$"
        }
        "IncludeDisk" = {
            value = "$IcingaCheckDiskHealth_Array_IncludeDisk$"
        }
        "DiskAvgTransSecWarning" = {
            value = "$IcingaCheckDiskHealth_Object_DiskAvgTransSecWarning$"
        }
        "DiskReadByteSecCritical" = {
            value = "$IcingaCheckDiskHealth_Object_DiskReadByteSecCritical$"
        }
        "DiskAvgReadSecCritical" = {
            value = "$IcingaCheckDiskHealth_Object_DiskAvgReadSecCritical$"
        }
        "DiskWriteSecWarning" = {
            value = "$IcingaCheckDiskHealth_Object_DiskWriteSecWarning$"
        }
        "DiskWriteByteSecCritical" = {
            value = "$IcingaCheckDiskHealth_Object_DiskWriteByteSecCritical$"
        }
        "ExcludePartition" = {
            value = "$IcingaCheckDiskHealth_Array_ExcludePartition$"
        }
        "IgnoreOfflineDisks" = {
            set_if = "$IcingaCheckDiskHealth_Switchparameter_IgnoreOfflineDisks$"
        }
        "DiskWriteSecCritical" = {
            value = "$IcingaCheckDiskHealth_Object_DiskWriteSecCritical$"
        }
        "DiskReadSecCritical" = {
            value = "$IcingaCheckDiskHealth_Object_DiskReadSecCritical$"
        }
        "DiskQueueLenWarning" = {
            value = "$IcingaCheckDiskHealth_Object_DiskQueueLenWarning$"
        }
        "DiskAvgReadSecWarning" = {
            value = "$IcingaCheckDiskHealth_Object_DiskAvgReadSecWarning$"
        }
        "DiskAvgTransSecCritical" = {
            value = "$IcingaCheckDiskHealth_Object_DiskAvgTransSecCritical$"
        }
        "DiskQueueAvgLenCritical" = {
            value = "$IcingaCheckDiskHealth_Object_DiskQueueAvgLenCritical$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckDiskHealth_String_ThresholdInterval$"
        }
        "DiskAvgWriteSecWarning" = {
            value = "$IcingaCheckDiskHealth_Object_DiskAvgWriteSecWarning$"
        }
        "DiskReadSecWarning" = {
            value = "$IcingaCheckDiskHealth_Object_DiskReadSecWarning$"
        }
        "IncludePartition" = {
            value = "$IcingaCheckDiskHealth_Array_IncludePartition$"
        }
        "DiskQueueAvgLenWarning" = {
            value = "$IcingaCheckDiskHealth_Object_DiskQueueAvgLenWarning$"
        }
    }
    vars.IcingaCheckDiskHealth_Switchparameter_CheckLogicalOnly = false
    vars.IcingaCheckDiskHealth_Switchparameter_IgnoreReadOnlyDisks = false
    vars.ifw_api_command = "invoke-icingacheckdiskhealth"
    vars.IcingaCheckDiskHealth_Switchparameter_IgnoreOfflineDisks = false
}

object CheckCommand "Invoke-IcingaCheckProcess" {
    import "PowerShell Base"

    arguments += {
        "-TotalThreadCountCritical" = {
            description = "Compares thread usage for all processes with the same name against the given threshold. Will throw critical if exceeded.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_TotalThreadCountCritical$"
            order = 17
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckProcess_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckProcess_Int32_Verbosity$"
            order = 21
        }
        "-TotalThreadCountWarning" = {
            description = "Compares thread usage for all processes with the same name against the given threshold. Will throw warning if exceeded.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_TotalThreadCountWarning$"
            order = 16
        }
        "-MemoryWarning" = {
            description = "Compares each single process memory usage against the given threshold. Will throw warning if exceeded. Supports % unit to compare the process memory usage for the entire memory space available.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_MemoryWarning$"
            order = 4
        }
        "-Process" = {
            description = "Allows to filter for a list of processes with a given name. Use the process name without file ending, like '.exe'."
            value = {{
                var arr = macro("$IcingaCheckProcess_Array_Process$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 20
        }
        "-TotalCPUWarning" = {
            description = "Compares cpu usage for all processes with the same name against the given threshold. Will throw warning if exceeded.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_TotalCPUWarning$"
            order = 14
        }
        "-TotalMemoryWarning" = {
            description = "Compares memory usage for all processes with the same name against the given threshold. Will throw warning if exceeded. Supports % unit to compare the total process memory usage for the entire memory space available.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_TotalMemoryWarning$"
            order = 12
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckProcess' "
            order = 0
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckProcess_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckProcess_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-PageFileCritical" = {
            description = "Compares each single process page file usage against the given threshold. Will throw critical if exceeded. Supports % unit to compare the process page file usage for the entire page file space available.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_PageFileCritical$"
            order = 3
        }
        "-CPUWarning" = {
            description = "Compares each single process cpu usage against the given threshold. Will throw warning if exceeded.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_CPUWarning$"
            order = 6
        }
        "-TotalPageFileWarning" = {
            description = "Compares page file usage for all processes with the same name against the given threshold. Will throw warning if exceeded. Supports % unit to compare the total process page file usage for the entire page file space available.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_TotalPageFileWarning$"
            order = 10
        }
        "-ThreadCountWarning" = {
            description = "Compares each single process thread usage against the given threshold. Will throw warning if exceeded.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_ThreadCountWarning$"
            order = 8
        }
        "-TotalProcessCountWarning" = {
            description = "Compares process count for all processes with the same name against the given threshold. Will throw warning if exceeded.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_TotalProcessCountWarning$"
            order = 18
        }
        "-CPUCritical" = {
            description = "Compares each single process cpu usage against the given threshold. Will throw critical if exceeded.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_CPUCritical$"
            order = 7
        }
        "-TotalCPUCritical" = {
            description = "Compares cpu usage for all processes with the same name against the given threshold. Will throw critical if exceeded.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_TotalCPUCritical$"
            order = 15
        }
        "-MemoryCritical" = {
            description = "Compares each single process memory usage against the given threshold. Will throw critical if exceeded. Supports % unit to compare the process memory usage for the entire memory space available.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_MemoryCritical$"
            order = 5
        }
        "-PageFileWarning" = {
            description = "Compares each single process page file usage against the given threshold. Will throw warning if exceeded. Supports % unit to compare the process page file usage for the entire page file space available.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_PageFileWarning$"
            order = 2
        }
        "-TotalProcessCountCritical" = {
            description = "Compares process count for all processes with the same name against the given threshold. Will throw critical if exceeded.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_TotalProcessCountCritical$"
            order = 19
        }
        "-TotalPageFileCritical" = {
            description = "Compares page file usage for all processes with the same name against the given threshold. Will throw critical if exceeded. Supports % unit to compare the total process page file usage for the entire page file space available.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_TotalPageFileCritical$"
            order = 11
        }
        "-TotalMemoryCritical" = {
            description = "Compares memory usage for all processes with the same name against the given threshold. Will throw critical if exceeded. Supports % unit to compare the total process memory usage for the entire memory space available.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_TotalMemoryCritical$"
            order = 13
        }
        "-ThreadCountCritical" = {
            description = "Compares each single process thread usage against the given threshold. Will throw critical if exceeded.  Follows the Icinga Plugin threshold guidelines."
            value = "$IcingaCheckProcess_Object_ThreadCountCritical$"
            order = 9
        }
    }
    vars.IcingaCheckProcess_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "TotalThreadCountWarning" = {
            value = "$IcingaCheckProcess_Object_TotalThreadCountWarning$"
        }
        "ThreadCountWarning" = {
            value = "$IcingaCheckProcess_Object_ThreadCountWarning$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckProcess_Switchparameter_NoPerfData$"
        }
        "CPUCritical" = {
            value = "$IcingaCheckProcess_Object_CPUCritical$"
        }
        "TotalPageFileCritical" = {
            value = "$IcingaCheckProcess_Object_TotalPageFileCritical$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckProcess_String_ThresholdInterval$"
        }
        "TotalPageFileWarning" = {
            value = "$IcingaCheckProcess_Object_TotalPageFileWarning$"
        }
        "PageFileWarning" = {
            value = "$IcingaCheckProcess_Object_PageFileWarning$"
        }
        "ThreadCountCritical" = {
            value = "$IcingaCheckProcess_Object_ThreadCountCritical$"
        }
        "TotalCPUWarning" = {
            value = "$IcingaCheckProcess_Object_TotalCPUWarning$"
        }
        "PageFileCritical" = {
            value = "$IcingaCheckProcess_Object_PageFileCritical$"
        }
        "Process" = {
            value = "$IcingaCheckProcess_Array_Process$"
        }
        "TotalProcessCountWarning" = {
            value = "$IcingaCheckProcess_Object_TotalProcessCountWarning$"
        }
        "CPUWarning" = {
            value = "$IcingaCheckProcess_Object_CPUWarning$"
        }
        "TotalMemoryCritical" = {
            value = "$IcingaCheckProcess_Object_TotalMemoryCritical$"
        }
        "TotalMemoryWarning" = {
            value = "$IcingaCheckProcess_Object_TotalMemoryWarning$"
        }
        "TotalThreadCountCritical" = {
            value = "$IcingaCheckProcess_Object_TotalThreadCountCritical$"
        }
        "MemoryWarning" = {
            value = "$IcingaCheckProcess_Object_MemoryWarning$"
        }
        "Verbosity" = {
            value = "$IcingaCheckProcess_Int32_Verbosity$"
        }
        "TotalProcessCountCritical" = {
            value = "$IcingaCheckProcess_Object_TotalProcessCountCritical$"
        }
        "MemoryCritical" = {
            value = "$IcingaCheckProcess_Object_MemoryCritical$"
        }
        "TotalCPUCritical" = {
            value = "$IcingaCheckProcess_Object_TotalCPUCritical$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckprocess"
}

object CheckCommand "Invoke-IcingaCheckCheckSum" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckCheckSum' "
            order = 0
        }
        "-Algorithm" = {
            set_if = {{
                var str = macro("$IcingaCheckCheckSum_String_Algorithm$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Used to specify a string, which contains the algorithm to be used.  Allowed algorithms: 'SHA1', 'SHA256', 'SHA384', 'SHA512', 'MD5'"
            value = {{
                var str = macro("$IcingaCheckCheckSum_String_Algorithm$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 3
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckCheckSum_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckCheckSum_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckCheckSum_Int32_Verbosity$"
            order = 5
        }
        "-Hash" = {
            set_if = {{
                var str = macro("$IcingaCheckCheckSum_String_Hash$"); if (len(str) == 0) { return false; }; return true;
            }}
            value = {{
                var str = macro("$IcingaCheckCheckSum_String_Hash$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 4
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckCheckSum_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Path" = {
            set_if = {{
                var str = macro("$IcingaCheckCheckSum_String_Path$"); if (len(str) == 0) { return false; }; return true;
            }}
            value = {{
                var str = macro("$IcingaCheckCheckSum_String_Path$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 2
        }
    }
    vars.IcingaCheckCheckSum_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "Path" = {
            value = "$IcingaCheckCheckSum_String_Path$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckCheckSum_String_ThresholdInterval$"
        }
        "Algorithm" = {
            value = "$IcingaCheckCheckSum_String_Algorithm$"
        }
        "Verbosity" = {
            value = "$IcingaCheckCheckSum_Int32_Verbosity$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckCheckSum_Switchparameter_NoPerfData$"
        }
        "Hash" = {
            value = "$IcingaCheckCheckSum_String_Hash$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckchecksum"
}

object CheckCommand "Invoke-IcingaCheckScheduledTask" {
    import "PowerShell Base"

    arguments += {
        "-WarningNextRunTime" = {
            set_if = {{
                var str = macro("$IcingaCheckScheduledTask_String_WarningNextRunTime$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Allows to specify a time interval, on which the check will return warning based on the next run time of a task and the current time. The value will be added to the current time  Values have to be specified as time units like, 10m, 1d, 1w, 2M, 1y"
            value = {{
                var str = macro("$IcingaCheckScheduledTask_String_WarningNextRunTime$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 9
        }
        "-CriticalNextRunTime" = {
            set_if = {{
                var str = macro("$IcingaCheckScheduledTask_String_CriticalNextRunTime$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Allows to specify a time interval, on which the check will return critical based on the next run time of a task and the current time. The value will be added to the current time  Values have to be specified as time units like, 10m, 1d, 1w, 2M, 1y"
            value = {{
                var str = macro("$IcingaCheckScheduledTask_String_CriticalNextRunTime$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 10
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckScheduledTask_Switchparameter_NoPerfData$"
            order = 99
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckScheduledTask' "
            order = 0
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckScheduledTask_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckScheduledTask_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-WarningMissedRuns" = {
            description = "Defines a warning threshold for missed runs for filtered tasks.  Supports Icinga default threshold syntax."
            value = "$IcingaCheckScheduledTask_Object_WarningMissedRuns$"
            order = 5
        }
        "-IgnoreLastRunTime" = {
            set_if = "$IcingaCheckScheduledTask_Switchparameter_IgnoreLastRunTime$"
            order = 99
        }
        "-TaskName" = {
            description = "A list of tasks to check for. If your tasks contain spaces, wrap them around a ' to ensure they are properly handled as string"
            value = {{
                var arr = macro("$IcingaCheckScheduledTask_Array_TaskName$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
        "-CriticalLastRunTime" = {
            set_if = {{
                var str = macro("$IcingaCheckScheduledTask_String_CriticalLastRunTime$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Allows to specify a time interval, on which the check will return critical based on the last run time of a task and the current time. The value will be subtracted from the current time  Values have to be specified as time units like, -10m, -1d, -1w, -2M, -1y"
            value = {{
                var str = macro("$IcingaCheckScheduledTask_String_CriticalLastRunTime$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 8
        }
        "-IgnoreExitCodes" = {
            description = "A list of exit codes which will be considered as [OK]. By default every task which did not exit with 0 will be handled as critical."
            value = {{
                var arr = macro("$IcingaCheckScheduledTask_Array_IgnoreExitCodes$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 4
        }
        "-CriticalMissedRuns" = {
            description = "Defines a critical threshold for missed runs for filtered tasks.  Supports Icinga default threshold syntax."
            value = "$IcingaCheckScheduledTask_Object_CriticalMissedRuns$"
            order = 6
        }
        "-State" = {
            description = "The state a task should currently have for the plugin to return [OK]"
            value = {{
                var arr = macro("$IcingaCheckScheduledTask_Array_State$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckScheduledTask_Int32_Verbosity$"
            order = 11
        }
        "-WarningLastRunTime" = {
            set_if = {{
                var str = macro("$IcingaCheckScheduledTask_String_WarningLastRunTime$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Allows to specify a time interval, on which the check will return warning based on the last run time of a task and the current time. The value will be subtracted from the current time  Values have to be specified as time units like, -10m, -1d, -1w, -2M, -1y"
            value = {{
                var str = macro("$IcingaCheckScheduledTask_String_WarningLastRunTime$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 7
        }
    }
    vars.IcingaCheckScheduledTask_Switchparameter_IgnoreLastRunTime = false
    vars.ifw_api_arguments = {
        "CriticalNextRunTime" = {
            value = "$IcingaCheckScheduledTask_String_CriticalNextRunTime$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckScheduledTask_String_ThresholdInterval$"
        }
        "TaskName" = {
            value = "$IcingaCheckScheduledTask_Array_TaskName$"
        }
        "WarningMissedRuns" = {
            value = "$IcingaCheckScheduledTask_Object_WarningMissedRuns$"
        }
        "WarningNextRunTime" = {
            value = "$IcingaCheckScheduledTask_String_WarningNextRunTime$"
        }
        "CriticalLastRunTime" = {
            value = "$IcingaCheckScheduledTask_String_CriticalLastRunTime$"
        }
        "CriticalMissedRuns" = {
            value = "$IcingaCheckScheduledTask_Object_CriticalMissedRuns$"
        }
        "IgnoreLastRunTime" = {
            set_if = "$IcingaCheckScheduledTask_Switchparameter_IgnoreLastRunTime$"
        }
        "IgnoreExitCodes" = {
            value = "$IcingaCheckScheduledTask_Array_IgnoreExitCodes$"
        }
        "WarningLastRunTime" = {
            value = "$IcingaCheckScheduledTask_String_WarningLastRunTime$"
        }
        "State" = {
            value = "$IcingaCheckScheduledTask_Array_State$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckScheduledTask_Switchparameter_NoPerfData$"
        }
        "Verbosity" = {
            value = "$IcingaCheckScheduledTask_Int32_Verbosity$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckscheduledtask"
    vars.IcingaCheckScheduledTask_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckFirewall" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckFirewall' "
            order = 0
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckFirewall_Int32_Verbosity$"
            order = 3
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckFirewall_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckFirewall_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Profile" = {
            description = "Used to specify an array of profiles to check. Available profiles are 'Domain', 'Public', 'Private'"
            value = {{
                var arr = macro("$IcingaCheckFirewall_Array_Profile$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckFirewall_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Enabled" = {
            set_if = "$IcingaCheckFirewall_Switchparameter_Enabled$"
            order = 99
        }
    }
    vars.ifw_api_arguments = {
        "Profile" = {
            value = "$IcingaCheckFirewall_Array_Profile$"
        }
        "Verbosity" = {
            value = "$IcingaCheckFirewall_Int32_Verbosity$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckFirewall_String_ThresholdInterval$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckFirewall_Switchparameter_NoPerfData$"
        }
        "Enabled" = {
            set_if = "$IcingaCheckFirewall_Switchparameter_Enabled$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckfirewall"
    vars.IcingaCheckFirewall_Switchparameter_Enabled = false
    vars.IcingaCheckFirewall_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckNetworkInterface" {
    import "PowerShell Base"

    arguments += {
        "-PacketSentSecWarn" = {
            description = "Warning threshold for network Interface Packets Sent/sec is the rate at which packets are sent on the network interface."
            value = "$IcingaCheckNetworkInterface_Object_PacketSentSecWarn$"
            order = 8
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckNetworkInterface' "
            order = 0
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckNetworkInterface_Switchparameter_NoPerfData$"
            order = 99
        }
        "-LinkSpeedCrit" = {
            description = "Critical threshold for the transmit link speed in (10 MBit, 100 MBit, 1 GBit, 10 GBit, 100 GBit, ...) of the network Interface."
            value = "$IcingaCheckNetworkInterface_Object_LinkSpeedCrit$"
            order = 25
        }
        "-DeviceReceivedBytesSecWarn" = {
            description = "Warning threshold for network Interface Bytes Received/sec is the rate at which bytes are received over each network adapter, including framing characters. It is also possible to enter e.g. 10% as threshold value, if you want a percentage comparison. Defaults to (B)"
            value = "$IcingaCheckNetworkInterface_Object_DeviceReceivedBytesSecWarn$"
            order = 22
        }
        "-PackteOutboundErrorCrit" = {
            description = "Critical threshold for network Interface Packets Outbound Errors is the number of outbound packets that could not be transmitted because of errors. It is possible to enter e.g. 10% as threshold value if you want a percentage comparison. Default (c)"
            value = "$IcingaCheckNetworkInterface_Object_PackteOutboundErrorCrit$"
            order = 13
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckNetworkInterface_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckNetworkInterface_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-DeviceReceivedBytesSecCrit" = {
            description = "Critical threshold for network Interface Bytes Received/sec is the rate at which bytes are received over each network adapter, including framing characters. It is also possible to enter e.g. 10% as threshold value, if you want a percentage comparison. Defaults to (B)"
            value = "$IcingaCheckNetworkInterface_Object_DeviceReceivedBytesSecCrit$"
            order = 23
        }
        "-PackteReceivedErrorCrit" = {
            description = "Critical threshold for network Interface Packets Received Errors is the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol. It is possible to enter e.g. 10% as threshold value if you want a percentage comparison. Default (c)"
            value = "$IcingaCheckNetworkInterface_Object_PackteReceivedErrorCrit$"
            order = 11
        }
        "-DeviceSentBytesSecCrit" = {
            description = "Critical threshold for network Interface Bytes Sent/sec is the rate at which bytes are sent over each network adapter, including framing characters. It is also possible to enter e.g. 10% as threshold value, if you want a percentage comparison. Defaults to (B)"
            value = "$IcingaCheckNetworkInterface_Object_DeviceSentBytesSecCrit$"
            order = 21
        }
        "-IfSlaveEnabledStateCrit" = {
            description = "Critical threshold for the State of a network Interface Team-Members/Slaves."
            value = "$IcingaCheckNetworkInterface_Object_IfSlaveEnabledStateCrit$"
            order = 29
        }
        "-PacketOutboundDiscardedWarn" = {
            description = "Warning threshold for network Interface Packets Outbound Discarded is the number of outbound packets that were chosen to be discarded even though no errors had been detected to prevent transmission. It is possible to enter e.g. 10% as threshold value if you want a percentage comparison. Default (c)"
            value = "$IcingaCheckNetworkInterface_Object_PacketOutboundDiscardedWarn$"
            order = 16
        }
        "-PacketOutboundDiscardedCrit" = {
            description = "Critical threshold for network Interface Packets Outbound Discarded is the number of outbound packets that were chosen to be discarded even though no errors had been detected to prevent transmission. It is possible to enter e.g. 10% as threshold value if you want a percentage comparison. Default (c)"
            value = "$IcingaCheckNetworkInterface_Object_PacketOutboundDiscardedCrit$"
            order = 17
        }
        "-IfTeamStatusWarn" = {
            description = "Warning threshold for the Status of a network Interface Teams."
            value = "$IcingaCheckNetworkInterface_Object_IfTeamStatusWarn$"
            order = 26
        }
        "-IncludeHidden" = {
            set_if = "$IcingaCheckNetworkInterface_Switchparameter_IncludeHidden$"
            order = 99
        }
        "-DeviceTotalBytesSecCrit" = {
            description = "Critical threshold for network Interface Bytes Total/sec is the rate at which bytes are sent and received over each network adapter, including framing characters. It is also possible to enter e.g. 10% as threshold value, if you want a percentage comparison. Defaults to (B)"
            value = "$IcingaCheckNetworkInterface_Object_DeviceTotalBytesSecCrit$"
            order = 19
        }
        "-PackteOutboundErrorWarn" = {
            description = "Warning threshold for network Interface Packets Outbound Errors is the number of outbound packets that could not be transmitted because of errors. It is possible to enter e.g. 10% as threshold value if you want a percentage comparison. Default (c)"
            value = "$IcingaCheckNetworkInterface_Object_PackteOutboundErrorWarn$"
            order = 12
        }
        "-DeviceTotalBytesSecWarn" = {
            description = "Warning threshold for network Interface Bytes Total/sec is the rate at which bytes are sent and received over each network adapter, including framing characters. It is also possible to enter e.g. 10% as threshold value, if you want a percentage comparison. Defaults to (B)"
            value = "$IcingaCheckNetworkInterface_Object_DeviceTotalBytesSecWarn$"
            order = 18
        }
        "-IfTeamStatusCrit" = {
            description = "Critical threshold for the Status of a network Interface Teams."
            value = "$IcingaCheckNetworkInterface_Object_IfTeamStatusCrit$"
            order = 27
        }
        "-LinkSpeedWarn" = {
            description = "Warning threshold for the transmit link speed in (10 MBit, 100 MBit, 1 GBit, 10 GBit, 100 GBit, ...) of the network Interface."
            value = "$IcingaCheckNetworkInterface_Object_LinkSpeedWarn$"
            order = 24
        }
        "-IncludeNetworkDevice" = {
            description = "Specify the index id, interface name or connection name of network adapters you want to include for checks. Example 4, 3, *LAN*, *Ethernet*"
            value = {{
                var arr = macro("$IcingaCheckNetworkInterface_Array_IncludeNetworkDevice$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
        "-DeviceSentBytesSecWarn" = {
            description = "Warning threshold for network Interface Bytes Sent/sec is the rate at which bytes are sent over each network adapter, including framing characters. It is also possible to enter e.g. 10% as threshold value, if you want a percentage comparison. Defaults to (B)"
            value = "$IcingaCheckNetworkInterface_Object_DeviceSentBytesSecWarn$"
            order = 20
        }
        "-PackteReceivedErrorWarn" = {
            description = "Warning threshold for network Interface Packets Received Errors is the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol. It is possible to enter e.g. 10% as threshold value if you want a percentage comparison. Default (c)"
            value = "$IcingaCheckNetworkInterface_Object_PackteReceivedErrorWarn$"
            order = 10
        }
        "-PacketReceivedDiscardedWarn" = {
            description = "Warning threshold for network Interface Packets Received Discarded is the number of inbound packets that were chosen to be discarded even though no errors had been detected to prevent their delivery to a higher-layer protocol. It is possible to enter e.g. 10% as threshold value if you want a percentage comparison. Default (c)"
            value = "$IcingaCheckNetworkInterface_Object_PacketReceivedDiscardedWarn$"
            order = 14
        }
        "-IfConnectionStatusCrit" = {
            description = "Critical threshold for the state of the network adapter connection to the network."
            value = "$IcingaCheckNetworkInterface_Object_IfConnectionStatusCrit$"
            order = 34
        }
        "-IncludeInterfaceTeam" = {
            description = "Specify the name of network interface teams you want to include for checks. Example OutboundGroup, ClusterInterface"
            value = {{
                var arr = macro("$IcingaCheckNetworkInterface_Array_IncludeInterfaceTeam$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 5
        }
        "-PacketReceivedSecWarn" = {
            description = "Warning threshold for network Interface Packets Received/sec is the rate at which packets are received on the network interface."
            value = "$IcingaCheckNetworkInterface_Object_PacketReceivedSecWarn$"
            order = 6
        }
        "-PacketReceivedDiscardedCrit" = {
            description = "Critical threshold for network Interface Packets Received Discarded is the number of inbound packets that were chosen to be discarded even though no errors had been detected to prevent their delivery to a higher-layer protocol. It is possible to enter e.g. 10% as threshold value if you want a percentage comparison. Default (c)"
            value = "$IcingaCheckNetworkInterface_Object_PacketReceivedDiscardedCrit$"
            order = 15
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckNetworkInterface_Object_Verbosity$"
            order = 35
        }
        "-IfOperationalStatusCrit" = {
            description = "Critical threshold for the current network interface operational status."
            value = "$IcingaCheckNetworkInterface_Object_IfOperationalStatusCrit$"
            order = 32
        }
        "-IfSlaveEnabledStateWarn" = {
            description = "Warning threshold for the State of a network Interface Team-Members/Slaves."
            value = "$IcingaCheckNetworkInterface_Object_IfSlaveEnabledStateWarn$"
            order = 28
        }
        "-IfConnectionStatusWarn" = {
            description = "Warning threshold for the state of the network adapter connection to the network."
            value = "$IcingaCheckNetworkInterface_Object_IfConnectionStatusWarn$"
            order = 33
        }
        "-IfOperationalStatusWarn" = {
            description = "Warning threshold for the current network interface operational status."
            value = "$IcingaCheckNetworkInterface_Object_IfOperationalStatusWarn$"
            order = 31
        }
        "-ExcludeNetworkDevice" = {
            description = "Specify the index id, interface name or connection name of network adapters you want to exclude for checks. Example 4, 3, *LAN*, *Ethernet*"
            value = {{
                var arr = macro("$IcingaCheckNetworkInterface_Array_ExcludeNetworkDevice$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
        "-PacketReceivedSecCrit" = {
            description = "Critical threshold for network Interface Packets Received/sec is the rate at which packets are received on the network interface."
            value = "$IcingaCheckNetworkInterface_Object_PacketReceivedSecCrit$"
            order = 7
        }
        "-ExcludeInterfaceTeam" = {
            description = "Specify the name of network interface teams you want to exclude for checks. Example OutboundGroup, ClusterInterface"
            value = {{
                var arr = macro("$IcingaCheckNetworkInterface_Array_ExcludeInterfaceTeam$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 4
        }
        "-PacketSentSecCrit" = {
            description = "Critical threshold for network Interface Packets Sent/sec is the rate at which packets are sent on the network interface."
            value = "$IcingaCheckNetworkInterface_Object_PacketSentSecCrit$"
            order = 9
        }
        "-IfAdminStatusWarn" = {
            description = "Warning threshold for the network Interface administrative status."
            value = "$IcingaCheckNetworkInterface_Object_IfAdminStatusWarn$"
            order = 30
        }
    }
    vars.IcingaCheckNetworkInterface_Switchparameter_IncludeHidden = false
    vars.IcingaCheckNetworkInterface_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "PackteReceivedErrorCrit" = {
            value = "$IcingaCheckNetworkInterface_Object_PackteReceivedErrorCrit$"
        }
        "IfOperationalStatusWarn" = {
            value = "$IcingaCheckNetworkInterface_Object_IfOperationalStatusWarn$"
        }
        "IncludeHidden" = {
            set_if = "$IcingaCheckNetworkInterface_Switchparameter_IncludeHidden$"
        }
        "Verbosity" = {
            value = "$IcingaCheckNetworkInterface_Object_Verbosity$"
        }
        "DeviceSentBytesSecWarn" = {
            value = "$IcingaCheckNetworkInterface_Object_DeviceSentBytesSecWarn$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckNetworkInterface_Switchparameter_NoPerfData$"
        }
        "PackteOutboundErrorCrit" = {
            value = "$IcingaCheckNetworkInterface_Object_PackteOutboundErrorCrit$"
        }
        "IfTeamStatusCrit" = {
            value = "$IcingaCheckNetworkInterface_Object_IfTeamStatusCrit$"
        }
        "IfAdminStatusWarn" = {
            value = "$IcingaCheckNetworkInterface_Object_IfAdminStatusWarn$"
        }
        "IfConnectionStatusCrit" = {
            value = "$IcingaCheckNetworkInterface_Object_IfConnectionStatusCrit$"
        }
        "ExcludeNetworkDevice" = {
            value = "$IcingaCheckNetworkInterface_Array_ExcludeNetworkDevice$"
        }
        "DeviceTotalBytesSecWarn" = {
            value = "$IcingaCheckNetworkInterface_Object_DeviceTotalBytesSecWarn$"
        }
        "IfTeamStatusWarn" = {
            value = "$IcingaCheckNetworkInterface_Object_IfTeamStatusWarn$"
        }
        "PackteOutboundErrorWarn" = {
            value = "$IcingaCheckNetworkInterface_Object_PackteOutboundErrorWarn$"
        }
        "PacketReceivedDiscardedWarn" = {
            value = "$IcingaCheckNetworkInterface_Object_PacketReceivedDiscardedWarn$"
        }
        "IfOperationalStatusCrit" = {
            value = "$IcingaCheckNetworkInterface_Object_IfOperationalStatusCrit$"
        }
        "DeviceReceivedBytesSecWarn" = {
            value = "$IcingaCheckNetworkInterface_Object_DeviceReceivedBytesSecWarn$"
        }
        "PacketReceivedDiscardedCrit" = {
            value = "$IcingaCheckNetworkInterface_Object_PacketReceivedDiscardedCrit$"
        }
        "ExcludeInterfaceTeam" = {
            value = "$IcingaCheckNetworkInterface_Array_ExcludeInterfaceTeam$"
        }
        "PacketOutboundDiscardedWarn" = {
            value = "$IcingaCheckNetworkInterface_Object_PacketOutboundDiscardedWarn$"
        }
        "PackteReceivedErrorWarn" = {
            value = "$IcingaCheckNetworkInterface_Object_PackteReceivedErrorWarn$"
        }
        "DeviceTotalBytesSecCrit" = {
            value = "$IcingaCheckNetworkInterface_Object_DeviceTotalBytesSecCrit$"
        }
        "PacketSentSecCrit" = {
            value = "$IcingaCheckNetworkInterface_Object_PacketSentSecCrit$"
        }
        "LinkSpeedWarn" = {
            value = "$IcingaCheckNetworkInterface_Object_LinkSpeedWarn$"
        }
        "DeviceSentBytesSecCrit" = {
            value = "$IcingaCheckNetworkInterface_Object_DeviceSentBytesSecCrit$"
        }
        "PacketOutboundDiscardedCrit" = {
            value = "$IcingaCheckNetworkInterface_Object_PacketOutboundDiscardedCrit$"
        }
        "LinkSpeedCrit" = {
            value = "$IcingaCheckNetworkInterface_Object_LinkSpeedCrit$"
        }
        "IncludeInterfaceTeam" = {
            value = "$IcingaCheckNetworkInterface_Array_IncludeInterfaceTeam$"
        }
        "DeviceReceivedBytesSecCrit" = {
            value = "$IcingaCheckNetworkInterface_Object_DeviceReceivedBytesSecCrit$"
        }
        "PacketSentSecWarn" = {
            value = "$IcingaCheckNetworkInterface_Object_PacketSentSecWarn$"
        }
        "IfSlaveEnabledStateWarn" = {
            value = "$IcingaCheckNetworkInterface_Object_IfSlaveEnabledStateWarn$"
        }
        "IncludeNetworkDevice" = {
            value = "$IcingaCheckNetworkInterface_Array_IncludeNetworkDevice$"
        }
        "PacketReceivedSecWarn" = {
            value = "$IcingaCheckNetworkInterface_Object_PacketReceivedSecWarn$"
        }
        "IfConnectionStatusWarn" = {
            value = "$IcingaCheckNetworkInterface_Object_IfConnectionStatusWarn$"
        }
        "IfSlaveEnabledStateCrit" = {
            value = "$IcingaCheckNetworkInterface_Object_IfSlaveEnabledStateCrit$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckNetworkInterface_String_ThresholdInterval$"
        }
        "PacketReceivedSecCrit" = {
            value = "$IcingaCheckNetworkInterface_Object_PacketReceivedSecCrit$"
        }
    }
    vars.ifw_api_command = "invoke-icingachecknetworkinterface"
}

object CheckCommand "Invoke-IcingaCheckHttpJsonResponse" {
    import "PowerShell Base"

    arguments += {
        "-ServerPath" = {
            set_if = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_ServerPath$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Path for the request, example '/v1/my_endpoint'"
            value = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_ServerPath$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 3
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckHttpJsonResponse_Int32_Verbosity$"
            order = 13
        }
        "-StatusOnRequestError" = {
            set_if = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_StatusOnRequestError$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Status to set when the webservice cannot be reached or an error (e.g. 500) is returned - default is Unknown See https://icinga.com/docs/icinga-for-windows/latest/plugins/doc/10-Icinga-Plugins/ for description of threshold values"
            value = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_StatusOnRequestError$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 12
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckHttpJsonResponse_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Password" = {
            description = "Credentials to use for basic auth"
            value = "(ConvertTo-IcingaSecureString '$IcingaCheckHttpJsonResponse_Securestring_Password$')"
            order = 6
        }
        "-Username" = {
            set_if = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_Username$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Credentials to use for basic auth"
            value = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_Username$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 5
        }
        "-ValuePaths" = {
            description = "paths to look for values in the JSON object that is checked, including an alias for each parameter. Example: 'myAlias01:value01','myAlias02:nested.object.value02', 'myAlias03:'object'.'my.Par.With.Dots''"
            value = {{
                var arr = macro("$IcingaCheckHttpJsonResponse_Array_ValuePaths$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 8
        }
        "-ValueTypes" = {
            description = "Value types of each parameter. Supported Types: Numeric, Boolean, DateTime, String Example: 'myAlias01:Numeric','myAlias02:DateTime'"
            value = {{
                var arr = macro("$IcingaCheckHttpJsonResponse_Array_ValueTypes$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 9
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckHttpJsonResponse' "
            order = 0
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-ServerUri" = {
            set_if = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_ServerUri$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Base URI of the server, example 'https://example.comm'"
            value = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_ServerUri$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 2
        }
        "-Critical" = {
            description = "Critical thresholds using icinga-powershell syntax. Example: 'myNumericAlias01:~:2','myDateTimeAlias:-10d', 'myBooleanAlias:True'"
            value = {{
                var arr = macro("$IcingaCheckHttpJsonResponse_Array_Critical$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 11
        }
        "-IgnoreSSL" = {
            set_if = "$IcingaCheckHttpJsonResponse_Switchparameter_IgnoreSSL$"
            order = 99
        }
        "-Timeout" = {
            description = "Timeout in seconds before the http request is aborted. Defaults to 30"
            value = "$IcingaCheckHttpJsonResponse_Int32_Timeout$"
            order = 7
        }
        "-Warning" = {
            description = "Warning thresholds using icinga-powershell syntax. Example: 'myNumericAlias01:~:2','myDateTimeAlias:-10d', 'myBooleanAlias:True'"
            value = {{
                var arr = macro("$IcingaCheckHttpJsonResponse_Array_Warning$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 10
        }
        "-QueryParameter" = {
            set_if = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_QueryParameter$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Query parameter for the request without ?, example 'command=example'"
            value = {{
                var str = macro("$IcingaCheckHttpJsonResponse_String_QueryParameter$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 4
        }
        "-NegateStringResults" = {
            set_if = "$IcingaCheckHttpJsonResponse_Switchparameter_NegateStringResults$"
            order = 99
        }
    }
    vars.IcingaCheckHttpJsonResponse_Switchparameter_NegateStringResults = false
    vars.ifw_api_arguments = {
        "QueryParameter" = {
            value = "$IcingaCheckHttpJsonResponse_String_QueryParameter$"
        }
        "Timeout" = {
            value = "$IcingaCheckHttpJsonResponse_Int32_Timeout$"
        }
        "Username" = {
            value = "$IcingaCheckHttpJsonResponse_String_Username$"
        }
        "Password" = {
            value = "$IcingaCheckHttpJsonResponse_Securestring_Password$"
        }
        "ValueTypes" = {
            value = "$IcingaCheckHttpJsonResponse_Array_ValueTypes$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckHttpJsonResponse_String_ThresholdInterval$"
        }
        "IgnoreSSL" = {
            set_if = "$IcingaCheckHttpJsonResponse_Switchparameter_IgnoreSSL$"
        }
        "ServerPath" = {
            value = "$IcingaCheckHttpJsonResponse_String_ServerPath$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckHttpJsonResponse_Switchparameter_NoPerfData$"
        }
        "Warning" = {
            value = "$IcingaCheckHttpJsonResponse_Array_Warning$"
        }
        "Critical" = {
            value = "$IcingaCheckHttpJsonResponse_Array_Critical$"
        }
        "ValuePaths" = {
            value = "$IcingaCheckHttpJsonResponse_Array_ValuePaths$"
        }
        "StatusOnRequestError" = {
            value = "$IcingaCheckHttpJsonResponse_String_StatusOnRequestError$"
        }
        "NegateStringResults" = {
            set_if = "$IcingaCheckHttpJsonResponse_Switchparameter_NegateStringResults$"
        }
        "Verbosity" = {
            value = "$IcingaCheckHttpJsonResponse_Int32_Verbosity$"
        }
        "ServerUri" = {
            value = "$IcingaCheckHttpJsonResponse_String_ServerUri$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckhttpjsonresponse"
    vars.IcingaCheckHttpJsonResponse_Switchparameter_IgnoreSSL = false
    vars.IcingaCheckHttpJsonResponse_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckDirectory" {
    import "PowerShell Base"

    arguments += {
        "-CriticalLargestFile" = {
            description = "Checks the largest file size found for the given filters and input and returns critical for the provided threshold.  Follows the Icinga plugin threshold guidelines."
            value = "$IcingaCheckDirectory_Object_CriticalLargestFile$"
            order = 11
        }
        "-FileSizeGreaterThan" = {
            set_if = {{
                var str = macro("$IcingaCheckDirectory_String_FileSizeGreaterThan$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "String that expects input format like '20MB', which translates to the filze size 20 MB. Allowed units: B, KB, MB, GB, TB.  Thereby all files with a size of 20 MB or larger are considered within the check."
            value = {{
                var str = macro("$IcingaCheckDirectory_String_FileSizeGreaterThan$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 20
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckDirectory' "
            order = 0
        }
        "-WarningAverageFile" = {
            description = "Checks the resulting file count of the provided filters and input and returns warning for the provided threshold.  Follows the Icinga plugin threshold guidelines."
            value = "$IcingaCheckDirectory_Object_WarningAverageFile$"
            order = 12
        }
        "-WarningLargestFile" = {
            description = "Checks the largest file size found for the given filters and input and returns warning for the provided threshold.  Follows the Icinga plugin threshold guidelines."
            value = "$IcingaCheckDirectory_Object_WarningLargestFile$"
            order = 10
        }
        "-CreationYoungerThan" = {
            set_if = {{
                var str = macro("$IcingaCheckDirectory_String_CreationYoungerThan$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "String that expects input format like '20d', which translates to 20 days. Allowed units: ms, s, m, h, d, w, M, y.  Thereby all files which have a creation date younger then 20 days are considered within the check."
            value = {{
                var str = macro("$IcingaCheckDirectory_String_CreationYoungerThan$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 19
        }
        "-Warning" = {
            description = "Checks the resulting file count of the provided filters and input and returns warning for the provided threshold.  Follows the Icinga plugin threshold guidelines."
            value = "$IcingaCheckDirectory_Object_Warning$"
            order = 5
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckDirectory_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckDirectory_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckDirectory_Int32_Verbosity$"
            order = 22
        }
        "-ChangeTimeEqual" = {
            set_if = {{
                var str = macro("$IcingaCheckDirectory_String_ChangeTimeEqual$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "String that expects input format like '20d', which translates to 20 days. Allowed units: ms, s, m, h, d, w, M, y.  Thereby all files which have been changed 20 days ago are considered within the check."
            value = {{
                var str = macro("$IcingaCheckDirectory_String_ChangeTimeEqual$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 14
        }
        "-CountFolderAsFile" = {
            set_if = "$IcingaCheckDirectory_Switchparameter_CountFolderAsFile$"
            order = 99
        }
        "-WarningTotalSize" = {
            description = "Checks the resulting file count of the provided filters and input and returns warning for the provided threshold.  Follows the Icinga plugin threshold guidelines."
            value = "$IcingaCheckDirectory_Object_WarningTotalSize$"
            order = 6
        }
        "-CriticalSmallestFile" = {
            description = "Checks the smallest file size found for the given filters and input and returns critical for the provided threshold.  Follows the Icinga plugin threshold guidelines."
            value = "$IcingaCheckDirectory_Object_CriticalSmallestFile$"
            order = 9
        }
        "-Path" = {
            set_if = {{
                var str = macro("$IcingaCheckDirectory_String_Path$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Used to specify a path. e.g. 'C:\\Users\\Icinga\\Downloads'"
            value = {{
                var str = macro("$IcingaCheckDirectory_String_Path$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 2
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckDirectory_Switchparameter_NoPerfData$"
            order = 99
        }
        "-ChangeOlderThan" = {
            set_if = {{
                var str = macro("$IcingaCheckDirectory_String_ChangeOlderThan$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "String that expects input format like '20d', which translates to 20 days. Allowed units: ms, s, m, h, d, w, M, y.  Thereby all files which have a change date older then 20 days are considered within the check."
            value = {{
                var str = macro("$IcingaCheckDirectory_String_ChangeOlderThan$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 16
        }
        "-CriticalTotalSize" = {
            description = "Checks the resulting file count of the provided filters and input and returns critical for the provided threshold.  Follows the Icinga plugin threshold guidelines."
            value = "$IcingaCheckDirectory_Object_CriticalTotalSize$"
            order = 7
        }
        "-Critical" = {
            description = "Checks the resulting file count of the provided filters and input and returns critical for the provided threshold.  Follows the Icinga plugin threshold guidelines."
            value = "$IcingaCheckDirectory_Object_Critical$"
            order = 4
        }
        "-CriticalAverageFile" = {
            description = "Checks the resulting file count of the provided filters and input and returns critical for the provided threshold.  Follows the Icinga plugin threshold guidelines."
            value = "$IcingaCheckDirectory_Object_CriticalAverageFile$"
            order = 13
        }
        "-FileSizeSmallerThan" = {
            set_if = {{
                var str = macro("$IcingaCheckDirectory_String_FileSizeSmallerThan$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "String that expects input format like '5MB', which translates to the filze size 5 MB. Allowed units: B, KB, MB, GB, TB.  Thereby all files with a size of 5 MB or less are considered within the check."
            value = {{
                var str = macro("$IcingaCheckDirectory_String_FileSizeSmallerThan$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 21
        }
        "-CreationTimeEqual" = {
            set_if = {{
                var str = macro("$IcingaCheckDirectory_String_CreationTimeEqual$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "String that expects input format like '20d', which translates to 20 days. Allowed units: ms, s, m, h, d, w, M, y.  Thereby all files which have been created 20 days ago are considered within the check."
            value = {{
                var str = macro("$IcingaCheckDirectory_String_CreationTimeEqual$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 17
        }
        "-FileNames" = {
            description = "Used to specify an array of filenames or expressions to match against results to filter for specific files.  e.g '*.txt', '*.sql', finds all files ending with .txt and .sql"
            value = {{
                var arr = macro("$IcingaCheckDirectory_Array_FileNames$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
        "-WarningSmallestFile" = {
            description = "Checks the smallest file size found for the given filters and input and returns warning for the provided threshold.  Follows the Icinga plugin threshold guidelines."
            value = "$IcingaCheckDirectory_Object_WarningSmallestFile$"
            order = 8
        }
        "-CreationOlderThan" = {
            set_if = {{
                var str = macro("$IcingaCheckDirectory_String_CreationOlderThan$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "String that expects input format like '20d', which translates to 20 days. Allowed units: ms, s, m, h, d, w, M, y.  Thereby all files which have a creation date older then 20 days are considered within the check."
            value = {{
                var str = macro("$IcingaCheckDirectory_String_CreationOlderThan$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 18
        }
        "-ChangeYoungerThan" = {
            set_if = {{
                var str = macro("$IcingaCheckDirectory_String_ChangeYoungerThan$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "String that expects input format like '20d', which translates to 20 days. Allowed units: ms, s, m, h, d, w, M, y.  Thereby all files which have a change date younger then 20 days are considered within the check."
            value = {{
                var str = macro("$IcingaCheckDirectory_String_ChangeYoungerThan$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 15
        }
        "-ShowFileList" = {
            set_if = "$IcingaCheckDirectory_Switchparameter_ShowFileList$"
            order = 99
        }
        "-Recurse" = {
            set_if = "$IcingaCheckDirectory_Switchparameter_Recurse$"
            order = 99
        }
    }
    vars.IcingaCheckDirectory_Switchparameter_CountFolderAsFile = false
    vars.ifw_api_arguments = {
        "CreationOlderThan" = {
            value = "$IcingaCheckDirectory_String_CreationOlderThan$"
        }
        "WarningAverageFile" = {
            value = "$IcingaCheckDirectory_Object_WarningAverageFile$"
        }
        "CriticalAverageFile" = {
            value = "$IcingaCheckDirectory_Object_CriticalAverageFile$"
        }
        "WarningLargestFile" = {
            value = "$IcingaCheckDirectory_Object_WarningLargestFile$"
        }
        "CriticalLargestFile" = {
            value = "$IcingaCheckDirectory_Object_CriticalLargestFile$"
        }
        "WarningSmallestFile" = {
            value = "$IcingaCheckDirectory_Object_WarningSmallestFile$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckDirectory_Switchparameter_NoPerfData$"
        }
        "ChangeYoungerThan" = {
            value = "$IcingaCheckDirectory_String_ChangeYoungerThan$"
        }
        "CountFolderAsFile" = {
            set_if = "$IcingaCheckDirectory_Switchparameter_CountFolderAsFile$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckDirectory_String_ThresholdInterval$"
        }
        "CriticalSmallestFile" = {
            value = "$IcingaCheckDirectory_Object_CriticalSmallestFile$"
        }
        "CriticalTotalSize" = {
            value = "$IcingaCheckDirectory_Object_CriticalTotalSize$"
        }
        "FileSizeGreaterThan" = {
            value = "$IcingaCheckDirectory_String_FileSizeGreaterThan$"
        }
        "WarningTotalSize" = {
            value = "$IcingaCheckDirectory_Object_WarningTotalSize$"
        }
        "ChangeTimeEqual" = {
            value = "$IcingaCheckDirectory_String_ChangeTimeEqual$"
        }
        "FileSizeSmallerThan" = {
            value = "$IcingaCheckDirectory_String_FileSizeSmallerThan$"
        }
        "Warning" = {
            value = "$IcingaCheckDirectory_Object_Warning$"
        }
        "Critical" = {
            value = "$IcingaCheckDirectory_Object_Critical$"
        }
        "ChangeOlderThan" = {
            value = "$IcingaCheckDirectory_String_ChangeOlderThan$"
        }
        "ShowFileList" = {
            set_if = "$IcingaCheckDirectory_Switchparameter_ShowFileList$"
        }
        "FileNames" = {
            value = "$IcingaCheckDirectory_Array_FileNames$"
        }
        "CreationTimeEqual" = {
            value = "$IcingaCheckDirectory_String_CreationTimeEqual$"
        }
        "Verbosity" = {
            value = "$IcingaCheckDirectory_Int32_Verbosity$"
        }
        "Path" = {
            value = "$IcingaCheckDirectory_String_Path$"
        }
        "CreationYoungerThan" = {
            value = "$IcingaCheckDirectory_String_CreationYoungerThan$"
        }
        "Recurse" = {
            set_if = "$IcingaCheckDirectory_Switchparameter_Recurse$"
        }
    }
    vars.IcingaCheckDirectory_Switchparameter_ShowFileList = false
    vars.ifw_api_command = "invoke-icingacheckdirectory"
    vars.IcingaCheckDirectory_Switchparameter_NoPerfData = false
    vars.IcingaCheckDirectory_Switchparameter_Recurse = false
}

object CheckCommand "Invoke-IcingaCheckUNCPath" {
    import "PowerShell Base"

    arguments += {
        "-Path" = {
            set_if = {{
                var str = macro("$IcingaCheckUNCPath_String_Path$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "The path to a volume or network share you want to monitor, like '\\\\example.com\\Home' or 'C:\\ClusterSharedVolume\\Volume1'"
            value = {{
                var str = macro("$IcingaCheckUNCPath_String_Path$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 2
        }
        "-DisplayAlias" = {
            set_if = {{
                var str = macro("$IcingaCheckUNCPath_String_DisplayAlias$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Modifies the plugin output to not display the value provided within the `-Path` argument but to use this string value instead of shorten the output and make it more visual appealing."
            value = {{
                var str = macro("$IcingaCheckUNCPath_String_DisplayAlias$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 5
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckUNCPath_Object_Verbosity$"
            order = 10
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckUNCPath_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Password" = {
            description = "The password to authenticate the given user for. Has to be a secure string"
            value = "(ConvertTo-IcingaSecureString '$IcingaCheckUNCPath_Securestring_Password$')"
            order = 4
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckUNCPath' "
            order = 0
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckUNCPath_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckUNCPath_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-User" = {
            set_if = {{
                var str = macro("$IcingaCheckUNCPath_String_User$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Provide a username and/or domain to run this check for. The format can either be 'domain\\user' or 'domain@user'"
            value = {{
                var str = macro("$IcingaCheckUNCPath_String_User$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 3
        }
        "-Critical" = {
            description = "A critical threshold for the shares free space in either % or byte units, like '20%:' or '50GB:' Please note that this value is decreasing over time, therefor you will have to use the plugin handler and add ':' at the end of your input to check for 'current value < threshold' like in the previous example  Allowed units: %, B, KB, MB, GB, TB, PB, KiB, MiB, GiB, TiB, PiB"
            value = "$IcingaCheckUNCPath_Object_Critical$"
            order = 7
        }
        "-WarningTotal" = {
            description = "A warning threshold for the shares free space in either % or byte units, like '20%:' or '50GB:' Please note that this value is decreasing over time, therefor you will have to use the plugin handler and add ':' at the end of your input to check for 'current value < threshold' like in the previous example  Allowed units: %, B, KB, MB, GB, TB, PB, KiB, MiB, GiB, TiB, PiB"
            value = "$IcingaCheckUNCPath_Object_WarningTotal$"
            order = 8
        }
        "-Warning" = {
            description = "A warning threshold for the shares free space in either % or byte units, like '20%:' or '50GB:' Please note that this value is decreasing over time, therefor you will have to use the plugin handler and add ':' at the end of your input to check for 'current value < threshold' like in the previous example  Allowed units: %, B, KB, MB, GB, TB, PB, KiB, MiB, GiB, TiB, PiB"
            value = "$IcingaCheckUNCPath_Object_Warning$"
            order = 6
        }
        "-CheckUsedSpace" = {
            set_if = "$IcingaCheckUNCPath_Switchparameter_CheckUsedSpace$"
            order = 99
        }
        "-CriticalTotal" = {
            description = "A warning threshold for the shares total free space in byte units, like '50GB:' Please note that this value is decreasing over time, therefor you will have to use the plugin handler and add ':' at the end of your input to check for 'current value < threshold' like in the previous example  Allowed units: B, KB, MB, GB, TB, PB, KiB, MiB, GiB, TiB, PiB"
            value = "$IcingaCheckUNCPath_Object_CriticalTotal$"
            order = 9
        }
    }
    vars.IcingaCheckUNCPath_Switchparameter_CheckUsedSpace = false
    vars.ifw_api_arguments = {
        "WarningTotal" = {
            value = "$IcingaCheckUNCPath_Object_WarningTotal$"
        }
        "DisplayAlias" = {
            value = "$IcingaCheckUNCPath_String_DisplayAlias$"
        }
        "Path" = {
            value = "$IcingaCheckUNCPath_String_Path$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckUNCPath_String_ThresholdInterval$"
        }
        "CriticalTotal" = {
            value = "$IcingaCheckUNCPath_Object_CriticalTotal$"
        }
        "Password" = {
            value = "$IcingaCheckUNCPath_Securestring_Password$"
        }
        "CheckUsedSpace" = {
            set_if = "$IcingaCheckUNCPath_Switchparameter_CheckUsedSpace$"
        }
        "Critical" = {
            value = "$IcingaCheckUNCPath_Object_Critical$"
        }
        "Warning" = {
            value = "$IcingaCheckUNCPath_Object_Warning$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckUNCPath_Switchparameter_NoPerfData$"
        }
        "Verbosity" = {
            value = "$IcingaCheckUNCPath_Object_Verbosity$"
        }
        "User" = {
            value = "$IcingaCheckUNCPath_String_User$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckuncpath"
    vars.IcingaCheckUNCPath_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckPerfCounter" {
    import "PowerShell Base"

    arguments += {
        "-PerfCounter" = {
            description = "Used to specify an array of performance counter to check against."
            value = {{
                var arr = macro("$IcingaCheckPerfCounter_Array_PerfCounter$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckPerfCounter_Int32_Verbosity$"
            order = 7
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold."
            value = "$IcingaCheckPerfCounter_Object_Warning$"
            order = 3
        }
        "-IgnoreEmptyChecks" = {
            set_if = "$IcingaCheckPerfCounter_Switchparameter_IgnoreEmptyChecks$"
            order = 99
        }
        "-ExcludeCounter" = {
            description = "An [array] of strings to filter for, excluding the provided counters. Allows wildcard '*' usage"
            value = {{
                var arr = macro("$IcingaCheckPerfCounter_Array_ExcludeCounter$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 6
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold."
            value = "$IcingaCheckPerfCounter_Object_Critical$"
            order = 4
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckPerfCounter_Switchparameter_NoPerfData$"
            order = 99
        }
        "-IncludeCounter" = {
            description = "An [array] of strings to filter for, only including the provided counters. Allows wildcard '*' usage"
            value = {{
                var arr = macro("$IcingaCheckPerfCounter_Array_IncludeCounter$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 5
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckPerfCounter_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckPerfCounter_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckPerfCounter' "
            order = 0
        }
    }
    vars.IcingaCheckPerfCounter_Switchparameter_NoPerfData = false
    vars.IcingaCheckPerfCounter_Switchparameter_IgnoreEmptyChecks = false
    vars.ifw_api_arguments = {
        "PerfCounter" = {
            value = "$IcingaCheckPerfCounter_Array_PerfCounter$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckPerfCounter_String_ThresholdInterval$"
        }
        "ExcludeCounter" = {
            value = "$IcingaCheckPerfCounter_Array_ExcludeCounter$"
        }
        "Critical" = {
            value = "$IcingaCheckPerfCounter_Object_Critical$"
        }
        "IgnoreEmptyChecks" = {
            set_if = "$IcingaCheckPerfCounter_Switchparameter_IgnoreEmptyChecks$"
        }
        "Warning" = {
            value = "$IcingaCheckPerfCounter_Object_Warning$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckPerfCounter_Switchparameter_NoPerfData$"
        }
        "IncludeCounter" = {
            value = "$IcingaCheckPerfCounter_Array_IncludeCounter$"
        }
        "Verbosity" = {
            value = "$IcingaCheckPerfCounter_Int32_Verbosity$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckperfcounter"
}

object CheckCommand "Invoke-IcingaCheckICMP" {
    import "PowerShell Base"

    arguments += {
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckICMP_Int32_Verbosity$"
            order = 9
        }
        "-IPv4" = {
            set_if = "$IcingaCheckICMP_Switchparameter_IPv4$"
            order = 99
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckICMP_Switchparameter_NoPerfData$"
            order = 99
        }
        "-WarningPl" = {
            description = "Threshold on which the plugin will return 'WARNING' for the response time in ms"
            value = "$IcingaCheckICMP_Object_WarningPl$"
            order = 4
        }
        "-Hostname" = {
            set_if = {{
                var str = macro("$IcingaCheckICMP_String_Hostname$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "The target hosts IP or FQDN to send ICMP requests too"
            value = {{
                var str = macro("$IcingaCheckICMP_String_Hostname$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 6
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckICMP' "
            order = 0
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckICMP_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckICMP_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Critical" = {
            description = "Threshold on which the plugin will return 'CRITICAL' for the response time in ms"
            value = "$IcingaCheckICMP_Object_Critical$"
            order = 3
        }
        "-PacketSize" = {
            description = "The size of each packet send to the target host"
            value = "$IcingaCheckICMP_Int32_PacketSize$"
            order = 8
        }
        "-PacketCount" = {
            description = "The amount of packets send to the target host"
            value = "$IcingaCheckICMP_Int32_PacketCount$"
            order = 7
        }
        "-Warning" = {
            description = "Threshold on which the plugin will return 'WARNING' for the response time in ms"
            value = "$IcingaCheckICMP_Object_Warning$"
            order = 2
        }
        "-IPv6" = {
            set_if = "$IcingaCheckICMP_Switchparameter_IPv6$"
            order = 99
        }
        "-CriticalPl" = {
            description = "Threshold on which the plugin will return 'CRITICAL' for the response time in ms"
            value = "$IcingaCheckICMP_Object_CriticalPl$"
            order = 5
        }
    }
    vars.IcingaCheckICMP_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "PacketCount" = {
            value = "$IcingaCheckICMP_Int32_PacketCount$"
        }
        "Verbosity" = {
            value = "$IcingaCheckICMP_Int32_Verbosity$"
        }
        "Hostname" = {
            value = "$IcingaCheckICMP_String_Hostname$"
        }
        "CriticalPl" = {
            value = "$IcingaCheckICMP_Object_CriticalPl$"
        }
        "WarningPl" = {
            value = "$IcingaCheckICMP_Object_WarningPl$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckICMP_Switchparameter_NoPerfData$"
        }
        "Critical" = {
            value = "$IcingaCheckICMP_Object_Critical$"
        }
        "IPv6" = {
            set_if = "$IcingaCheckICMP_Switchparameter_IPv6$"
        }
        "Warning" = {
            value = "$IcingaCheckICMP_Object_Warning$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckICMP_String_ThresholdInterval$"
        }
        "PacketSize" = {
            value = "$IcingaCheckICMP_Int32_PacketSize$"
        }
        "IPv4" = {
            set_if = "$IcingaCheckICMP_Switchparameter_IPv4$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckicmp"
    vars.IcingaCheckICMP_Switchparameter_IPv6 = false
    vars.IcingaCheckICMP_Switchparameter_IPv4 = false
}

object CheckCommand "Invoke-IcingaCheckUsedPartitionSpace" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckUsedPartitionSpace' "
            order = 0
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckUsedPartitionSpace_Int32_Verbosity$"
            order = 6
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckUsedPartitionSpace_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckUsedPartitionSpace_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-IgnoreEmptyChecks" = {
            set_if = "$IcingaCheckUsedPartitionSpace_Switchparameter_IgnoreEmptyChecks$"
            order = 99
        }
        "-Include" = {
            description = "Used to specify an array of partitions to be included. If not set, the check expects that all not excluded partitions should be checked. e.g. 'C:','D:'"
            value = {{
                var arr = macro("$IcingaCheckUsedPartitionSpace_Array_Include$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 4
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold. This can either be a byte-value type like '10GB' or a %-value, like '10%'"
            value = "$IcingaCheckUsedPartitionSpace_Object_Warning$"
            order = 2
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold. This can either be a byte-value type like '10GB' or a %-value, like '10%'"
            value = "$IcingaCheckUsedPartitionSpace_Object_Critical$"
            order = 3
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckUsedPartitionSpace_Switchparameter_NoPerfData$"
            order = 99
        }
        "-CheckUsedSpace" = {
            set_if = "$IcingaCheckUsedPartitionSpace_Switchparameter_CheckUsedSpace$"
            order = 99
        }
        "-Exclude" = {
            description = "Used to specify an array of partitions to be excluded. e.g. 'C:','D:'"
            value = {{
                var arr = macro("$IcingaCheckUsedPartitionSpace_Array_Exclude$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 5
        }
        "-SkipUnknown" = {
            set_if = "$IcingaCheckUsedPartitionSpace_Switchparameter_SkipUnknown$"
            order = 99
        }
    }
    vars.ifw_api_arguments = {
        "Verbosity" = {
            value = "$IcingaCheckUsedPartitionSpace_Int32_Verbosity$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckUsedPartitionSpace_String_ThresholdInterval$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckUsedPartitionSpace_Switchparameter_NoPerfData$"
        }
        "Critical" = {
            value = "$IcingaCheckUsedPartitionSpace_Object_Critical$"
        }
        "Exclude" = {
            value = "$IcingaCheckUsedPartitionSpace_Array_Exclude$"
        }
        "Warning" = {
            value = "$IcingaCheckUsedPartitionSpace_Object_Warning$"
        }
        "IgnoreEmptyChecks" = {
            set_if = "$IcingaCheckUsedPartitionSpace_Switchparameter_IgnoreEmptyChecks$"
        }
        "SkipUnknown" = {
            set_if = "$IcingaCheckUsedPartitionSpace_Switchparameter_SkipUnknown$"
        }
        "CheckUsedSpace" = {
            set_if = "$IcingaCheckUsedPartitionSpace_Switchparameter_CheckUsedSpace$"
        }
        "Include" = {
            value = "$IcingaCheckUsedPartitionSpace_Array_Include$"
        }
    }
    vars.IcingaCheckUsedPartitionSpace_Switchparameter_CheckUsedSpace = false
    vars.IcingaCheckUsedPartitionSpace_Switchparameter_IgnoreEmptyChecks = false
    vars.ifw_api_command = "invoke-icingacheckusedpartitionspace"
    vars.IcingaCheckUsedPartitionSpace_Switchparameter_NoPerfData = false
    vars.IcingaCheckUsedPartitionSpace_Switchparameter_SkipUnknown = false
}

object CheckCommand "Invoke-IcingaCheckService" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckService' "
            order = 0
        }
        "-MitigateUnknown" = {
            set_if = "$IcingaCheckService_Switchparameter_MitigateUnknown$"
            order = 99
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckService_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckService_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckService_Int32_Verbosity$"
            order = 6
        }
        "-FilterStartupType" = {
            description = "Allows to include only services with a specific startup type inside the monitoring, in case you check for a list of specific services by using `-Service`"
            value = {{
                var arr = macro("$IcingaCheckService_Array_FilterStartupType$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 5
        }
        "-Status" = {
            set_if = {{
                var str = macro("$IcingaCheckService_String_Status$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Status for the specified service or services to check against."
            value = {{
                var str = macro("$IcingaCheckService_String_Status$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 4
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckService_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Service" = {
            description = "Used to specify an array of services which should be checked against the status. Supports '*' for wildcards."
            value = {{
                var arr = macro("$IcingaCheckService_Array_Service$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
        "-Exclude" = {
            description = "Allows to exclude services which might come in handy for checking services which are configured to start automatically on Windows but are not running and weren't exited properly."
            value = {{
                var arr = macro("$IcingaCheckService_Array_Exclude$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
    }
    vars.IcingaCheckService_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "ThresholdInterval" = {
            value = "$IcingaCheckService_String_ThresholdInterval$"
        }
        "MitigateUnknown" = {
            set_if = "$IcingaCheckService_Switchparameter_MitigateUnknown$"
        }
        "FilterStartupType" = {
            value = "$IcingaCheckService_Array_FilterStartupType$"
        }
        "Verbosity" = {
            value = "$IcingaCheckService_Int32_Verbosity$"
        }
        "Service" = {
            value = "$IcingaCheckService_Array_Service$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckService_Switchparameter_NoPerfData$"
        }
        "Status" = {
            value = "$IcingaCheckService_String_Status$"
        }
        "Exclude" = {
            value = "$IcingaCheckService_Array_Exclude$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckservice"
    vars.IcingaCheckService_Switchparameter_MitigateUnknown = false
}

object CheckCommand "Invoke-IcingaCheckCPU" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckCPU' "
            order = 0
        }
        "-SocketFilter" = {
            description = "Allows to specify one or mutlitple sockets by using their socket id. Not matching socket id's will not be evaluated by the plugin."
            value = {{
                var arr = macro("$IcingaCheckCPU_Array_SocketFilter$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 5
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckCPU_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckCPU_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckCPU_Int32_Verbosity$"
            order = 6
        }
        "-Core" = {
            set_if = {{
                var str = macro("$IcingaCheckCPU_String_Core$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Used to specify a single core to check for. For the average load across all cores use `_Total`"
            value = {{
                var str = macro("$IcingaCheckCPU_String_Core$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 4
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold. In this case an integer value."
            value = "$IcingaCheckCPU_Object_Warning$"
            order = 2
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold. In this case an integer value."
            value = "$IcingaCheckCPU_Object_Critical$"
            order = 3
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckCPU_Switchparameter_NoPerfData$"
            order = 99
        }
        "-OverallOnly" = {
            set_if = "$IcingaCheckCPU_Switchparameter_OverallOnly$"
            order = 99
        }
    }
    vars.IcingaCheckCPU_Switchparameter_OverallOnly = false
    vars.ifw_api_arguments = {
        "ThresholdInterval" = {
            value = "$IcingaCheckCPU_String_ThresholdInterval$"
        }
        "SocketFilter" = {
            value = "$IcingaCheckCPU_Array_SocketFilter$"
        }
        "Critical" = {
            value = "$IcingaCheckCPU_Object_Critical$"
        }
        "Core" = {
            value = "$IcingaCheckCPU_String_Core$"
        }
        "OverallOnly" = {
            set_if = "$IcingaCheckCPU_Switchparameter_OverallOnly$"
        }
        "Warning" = {
            value = "$IcingaCheckCPU_Object_Warning$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckCPU_Switchparameter_NoPerfData$"
        }
        "Verbosity" = {
            value = "$IcingaCheckCPU_Int32_Verbosity$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckcpu"
    vars.IcingaCheckCPU_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckTCP" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckTCP' "
            order = 0
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckTCP_Object_Verbosity$"
            order = 6
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckTCP_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckTCP_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Address" = {
            set_if = {{
                var str = macro("$IcingaCheckTCP_String_Address$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "The IP address or FQDN of the target host"
            value = {{
                var str = macro("$IcingaCheckTCP_String_Address$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 2
        }
        "-Negate" = {
            set_if = "$IcingaCheckTCP_Switchparameter_Negate$"
            order = 99
        }
        "-Critical" = {
            description = "A critical threshold for the connection time in seconds. Allows the usage of unit additions, like 100ms.  Allowed units: ms, s, m, h, d, w, M, y"
            value = "$IcingaCheckTCP_Object_Critical$"
            order = 5
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckTCP_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Ports" = {
            description = "A single or a list of ports to check on the target address"
            value = {{
                var arr = macro("$IcingaCheckTCP_Array_Ports$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
        "-Warning" = {
            description = "A warning threshold for the connection time in seconds. Allows the usage of unit additions, like 100ms.  Allowed units: ms, s, m, h, d, w, M, y"
            value = "$IcingaCheckTCP_Object_Warning$"
            order = 4
        }
    }
    vars.IcingaCheckTCP_Switchparameter_Negate = false
    vars.ifw_api_arguments = {
        "ThresholdInterval" = {
            value = "$IcingaCheckTCP_String_ThresholdInterval$"
        }
        "Ports" = {
            value = "$IcingaCheckTCP_Array_Ports$"
        }
        "Critical" = {
            value = "$IcingaCheckTCP_Object_Critical$"
        }
        "Negate" = {
            set_if = "$IcingaCheckTCP_Switchparameter_Negate$"
        }
        "Address" = {
            value = "$IcingaCheckTCP_String_Address$"
        }
        "Warning" = {
            value = "$IcingaCheckTCP_Object_Warning$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckTCP_Switchparameter_NoPerfData$"
        }
        "Verbosity" = {
            value = "$IcingaCheckTCP_Object_Verbosity$"
        }
    }
    vars.ifw_api_command = "invoke-icingachecktcp"
    vars.IcingaCheckTCP_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckUptime" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckUptime' "
            order = 0
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckUptime_Int32_Verbosity$"
            order = 4
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckUptime_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckUptime_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Warning" = {
            set_if = {{
                var str = macro("$IcingaCheckUptime_String_Warning$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Used to specify a Warning threshold. In this case a string. Allowed units include: ms, s, m, h, d, w, M, y"
            value = {{
                var str = macro("$IcingaCheckUptime_String_Warning$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 2
        }
        "-Critical" = {
            set_if = {{
                var str = macro("$IcingaCheckUptime_String_Critical$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Used to specify a Critical threshold. In this case a string. Allowed units include: ms, s, m, h, d, w, M, y"
            value = {{
                var str = macro("$IcingaCheckUptime_String_Critical$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 3
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckUptime_Switchparameter_NoPerfData$"
            order = 99
        }
    }
    vars.IcingaCheckUptime_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "Critical" = {
            value = "$IcingaCheckUptime_String_Critical$"
        }
        "Warning" = {
            value = "$IcingaCheckUptime_String_Warning$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckUptime_String_ThresholdInterval$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckUptime_Switchparameter_NoPerfData$"
        }
        "Verbosity" = {
            value = "$IcingaCheckUptime_Int32_Verbosity$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckuptime"
}

object CheckCommand "Invoke-IcingaCheckStoragePool" {
    import "PowerShell Base"

    arguments += {
        "-RetireMissingPhysicalDisksCritical" = {
            description = "Critical threshold RetireMissingPhysicalDisks specifies whether the storage subsystem will automatically retire physical disks that are missing from this storage pool and replace them with hot spares or other physical disks that are available in the storage pool."
            value = "$IcingaCheckStoragePool_Object_RetireMissingPhysicalDisksCritical$"
            order = 17
        }
        "-IsReadOnlyCritical" = {
            description = "Used to specify a Critical threshold for the StoragePool IsReadOnly Attr."
            value = "$IcingaCheckStoragePool_Object_IsReadOnlyCritical$"
            order = 8
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckStoragePool_Object_Verbosity$"
            order = 18
        }
        "-IsPowerProtectedCritical" = {
            description = "Critical threshold for StoragePool IsPowerProtected is, whether the disks in this pool are able to tolerate power loss without data loss. For example, they automatically flush volatile buffers to non-volatile media after external power is disconnected."
            value = "$IcingaCheckStoragePool_Object_IsPowerProtectedCritical$"
            order = 13
        }
        "-HealthStatusWarning" = {
            description = "Warning threshold for Health of StoragePool is whether or not the storage pool can maintain the required redundancy levels."
            value = "$IcingaCheckStoragePool_Object_HealthStatusWarning$"
            order = 14
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckStoragePool_Switchparameter_NoPerfData$"
            order = 99
        }
        "-FreeSpaceWarning" = {
            description = "Used to specify a Warning threshold for the StoragePool FreeSpaces in GB. This value is a decreasing metric which will require you to add a ':' behind the threshold, like '20GB:' to check if free space is lower compared to your threshold"
            value = "$IcingaCheckStoragePool_Object_FreeSpaceWarning$"
            order = 4
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckStoragePool' "
            order = 0
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckStoragePool_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckStoragePool_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-FreeSpaceCritical" = {
            description = "Used to specify a Critical threshold for the StoragePool FreeSpaces in GB. This value is a decreasing metric which will require you to add a ':' behind the threshold, like '20GB:' to check if free space is lower compared to your threshold"
            value = "$IcingaCheckStoragePool_Object_FreeSpaceCritical$"
            order = 5
        }
        "-IncludePrimordial" = {
            set_if = "$IcingaCheckStoragePool_Switchparameter_IncludePrimordial$"
            order = 99
        }
        "-IncludeStoragePool" = {
            description = "With this parameter you can filter out which StoragePools you want to check, provided you have several StoragePools on your system."
            value = {{
                var arr = macro("$IcingaCheckStoragePool_Array_IncludeStoragePool$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
        "-ExcludeStoragePool" = {
            description = "With this parameter you can filter out which StoragePools you do not want to check, provided you have several StoragePools on your system."
            value = {{
                var arr = macro("$IcingaCheckStoragePool_Array_ExcludeStoragePool$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
        "-CapacityWarning" = {
            description = "Used to specify a Warning threshold for the StoragePool Capacity."
            value = "$IcingaCheckStoragePool_Object_CapacityWarning$"
            order = 9
        }
        "-TotalUsedCritical" = {
            description = "Used to specify TotalUsed Critical threshold in GB."
            value = "$IcingaCheckStoragePool_Object_TotalUsedCritical$"
            order = 7
        }
        "-CapacityCritical" = {
            description = "Used to specify a Critical threshold for the StoragePool Capacity."
            value = "$IcingaCheckStoragePool_Object_CapacityCritical$"
            order = 10
        }
        "-SupportsDeduplicationCritical" = {
            description = "Critical threshold StoragePool SupportsDeduplication is, whether the storage pool supports data duplication or not."
            value = "$IcingaCheckStoragePool_Object_SupportsDeduplicationCritical$"
            order = 12
        }
        "-HealthStatusCritical" = {
            description = "Critical threshold for Health of StoragePool is whether or not the storage pool can maintain the required redundancy levels."
            value = "$IcingaCheckStoragePool_Object_HealthStatusCritical$"
            order = 15
        }
        "-ClearOnDeallocateCritical" = {
            description = "Critical threshold for StoragePool ClearOnDeallocate is, if physical disks should be zeroed (cleared of all data) when unmapped or removed from the storage pool."
            value = "$IcingaCheckStoragePool_Object_ClearOnDeallocateCritical$"
            order = 11
        }
        "-RetireMissingPhysicalDisksWarning" = {
            description = "Warning threshold RetireMissingPhysicalDisks specifies whether the storage subsystem will automatically retire physical disks that are missing from this storage pool and replace them with hot spares or other physical disks that are available in the storage pool."
            value = "$IcingaCheckStoragePool_Object_RetireMissingPhysicalDisksWarning$"
            order = 16
        }
        "-TotalUsedWarning" = {
            description = "Used to specify TotalUsed Warning threshold in GB."
            value = "$IcingaCheckStoragePool_Object_TotalUsedWarning$"
            order = 6
        }
    }
    vars.IcingaCheckStoragePool_Switchparameter_IncludePrimordial = false
    vars.ifw_api_arguments = {
        "ClearOnDeallocateCritical" = {
            value = "$IcingaCheckStoragePool_Object_ClearOnDeallocateCritical$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckStoragePool_Switchparameter_NoPerfData$"
        }
        "HealthStatusCritical" = {
            value = "$IcingaCheckStoragePool_Object_HealthStatusCritical$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckStoragePool_String_ThresholdInterval$"
        }
        "TotalUsedWarning" = {
            value = "$IcingaCheckStoragePool_Object_TotalUsedWarning$"
        }
        "RetireMissingPhysicalDisksWarning" = {
            value = "$IcingaCheckStoragePool_Object_RetireMissingPhysicalDisksWarning$"
        }
        "HealthStatusWarning" = {
            value = "$IcingaCheckStoragePool_Object_HealthStatusWarning$"
        }
        "IncludePrimordial" = {
            set_if = "$IcingaCheckStoragePool_Switchparameter_IncludePrimordial$"
        }
        "IsPowerProtectedCritical" = {
            value = "$IcingaCheckStoragePool_Object_IsPowerProtectedCritical$"
        }
        "ExcludeStoragePool" = {
            value = "$IcingaCheckStoragePool_Array_ExcludeStoragePool$"
        }
        "SupportsDeduplicationCritical" = {
            value = "$IcingaCheckStoragePool_Object_SupportsDeduplicationCritical$"
        }
        "RetireMissingPhysicalDisksCritical" = {
            value = "$IcingaCheckStoragePool_Object_RetireMissingPhysicalDisksCritical$"
        }
        "TotalUsedCritical" = {
            value = "$IcingaCheckStoragePool_Object_TotalUsedCritical$"
        }
        "IsReadOnlyCritical" = {
            value = "$IcingaCheckStoragePool_Object_IsReadOnlyCritical$"
        }
        "CapacityCritical" = {
            value = "$IcingaCheckStoragePool_Object_CapacityCritical$"
        }
        "FreeSpaceWarning" = {
            value = "$IcingaCheckStoragePool_Object_FreeSpaceWarning$"
        }
        "Verbosity" = {
            value = "$IcingaCheckStoragePool_Object_Verbosity$"
        }
        "FreeSpaceCritical" = {
            value = "$IcingaCheckStoragePool_Object_FreeSpaceCritical$"
        }
        "IncludeStoragePool" = {
            value = "$IcingaCheckStoragePool_Array_IncludeStoragePool$"
        }
        "CapacityWarning" = {
            value = "$IcingaCheckStoragePool_Object_CapacityWarning$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckstoragepool"
    vars.IcingaCheckStoragePool_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckUpdates" {
    import "PowerShell Base"

    arguments += {
        "-WarningRollups" = {
            description = "The warning threshold for the rollup update count on the Windows machine"
            value = "$IcingaCheckUpdates_Object_WarningRollups$"
            order = 7
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckUpdates_Int32_Verbosity$"
            order = 13
        }
        "-WarnOnReboot" = {
            set_if = "$IcingaCheckUpdates_Switchparameter_WarnOnReboot$"
            order = 99
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckUpdates_Switchparameter_NoPerfData$"
            order = 99
        }
        "-CriticalOther" = {
            description = "The critical threshold for all other updates on the Windows machine"
            value = "$IcingaCheckUpdates_Object_CriticalOther$"
            order = 12
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckUpdates' "
            order = 0
        }
        "-WarningDefender" = {
            description = "The warning threshold for the total pending update count on the Windows machine"
            value = "$IcingaCheckUpdates_Object_WarningDefender$"
            order = 9
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckUpdates_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckUpdates_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-WarningOther" = {
            description = "The warning threshold for the total pending update count on the Windows machine"
            value = "$IcingaCheckUpdates_Object_WarningOther$"
            order = 11
        }
        "-Warning" = {
            description = "The warning threshold for the total pending update count on the Windows machine"
            value = "$IcingaCheckUpdates_Object_Warning$"
            order = 3
        }
        "-CriticalDefender" = {
            description = "The critical threshold for the Microsoft Defender update count on the Windows machine"
            value = "$IcingaCheckUpdates_Object_CriticalDefender$"
            order = 10
        }
        "-CriticalRollups" = {
            description = "The critical threshold for the rollup update count on the Windows machine"
            value = "$IcingaCheckUpdates_Object_CriticalRollups$"
            order = 8
        }
        "-Critical" = {
            description = "The critical threshold for the total pending update count on the Windows machine"
            value = "$IcingaCheckUpdates_Object_Critical$"
            order = 4
        }
        "-CritOnReboot" = {
            set_if = "$IcingaCheckUpdates_Switchparameter_CritOnReboot$"
            order = 99
        }
        "-UpdateFilter" = {
            description = "Allows to filter for names of updates being included in the total update count, allowing a specific monitoring and filtering of certain updates beyond the provided categories"
            value = {{
                var arr = macro("$IcingaCheckUpdates_Array_UpdateFilter$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
        "-WarningSecurity" = {
            description = "The warning threshold for the total pending update count on the Windows machine"
            value = "$IcingaCheckUpdates_Object_WarningSecurity$"
            order = 5
        }
        "-CriticalSecurity" = {
            description = "The critical threshold for the security update count on the Windows machine"
            value = "$IcingaCheckUpdates_Object_CriticalSecurity$"
            order = 6
        }
    }
    vars.IcingaCheckUpdates_Switchparameter_NoPerfData = false
    vars.IcingaCheckUpdates_Switchparameter_WarnOnReboot = false
    vars.IcingaCheckUpdates_Switchparameter_CritOnReboot = false
    vars.ifw_api_arguments = {
        "WarningRollups" = {
            value = "$IcingaCheckUpdates_Object_WarningRollups$"
        }
        "CriticalSecurity" = {
            value = "$IcingaCheckUpdates_Object_CriticalSecurity$"
        }
        "CriticalRollups" = {
            value = "$IcingaCheckUpdates_Object_CriticalRollups$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckUpdates_Switchparameter_NoPerfData$"
        }
        "WarningDefender" = {
            value = "$IcingaCheckUpdates_Object_WarningDefender$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckUpdates_String_ThresholdInterval$"
        }
        "WarningSecurity" = {
            value = "$IcingaCheckUpdates_Object_WarningSecurity$"
        }
        "CriticalOther" = {
            value = "$IcingaCheckUpdates_Object_CriticalOther$"
        }
        "CriticalDefender" = {
            value = "$IcingaCheckUpdates_Object_CriticalDefender$"
        }
        "WarnOnReboot" = {
            set_if = "$IcingaCheckUpdates_Switchparameter_WarnOnReboot$"
        }
        "Warning" = {
            value = "$IcingaCheckUpdates_Object_Warning$"
        }
        "Critical" = {
            value = "$IcingaCheckUpdates_Object_Critical$"
        }
        "CritOnReboot" = {
            set_if = "$IcingaCheckUpdates_Switchparameter_CritOnReboot$"
        }
        "Verbosity" = {
            value = "$IcingaCheckUpdates_Int32_Verbosity$"
        }
        "UpdateFilter" = {
            value = "$IcingaCheckUpdates_Array_UpdateFilter$"
        }
        "WarningOther" = {
            value = "$IcingaCheckUpdates_Object_WarningOther$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckupdates"
}

object CheckCommand "Invoke-IcingaCheckProcessCount" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckProcessCount' "
            order = 0
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckProcessCount_Int32_Verbosity$"
            order = 5
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckProcessCount_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckProcessCount_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Process" = {
            description = "Used to specify an array of processes to count and match against. e.g. conhost,wininit"
            value = {{
                var arr = macro("$IcingaCheckProcessCount_Array_Process$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 4
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold. In this case an integer value."
            value = "$IcingaCheckProcessCount_Object_Warning$"
            order = 2
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold. In this case an integer value."
            value = "$IcingaCheckProcessCount_Object_Critical$"
            order = 3
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckProcessCount_Switchparameter_NoPerfData$"
            order = 99
        }
    }
    vars.ifw_api_arguments = {
        "Process" = {
            value = "$IcingaCheckProcessCount_Array_Process$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckProcessCount_String_ThresholdInterval$"
        }
        "Critical" = {
            value = "$IcingaCheckProcessCount_Object_Critical$"
        }
        "Warning" = {
            value = "$IcingaCheckProcessCount_Object_Warning$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckProcessCount_Switchparameter_NoPerfData$"
        }
        "Verbosity" = {
            value = "$IcingaCheckProcessCount_Int32_Verbosity$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckprocesscount"
    vars.IcingaCheckProcessCount_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckTimeSync" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckTimeSync' "
            order = 0
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckTimeSync_Int32_Verbosity$"
            order = 8
        }
        "-Warning" = {
            description = "Used to specify a offset Warning threshold e.g 10ms or 0.01s"
            value = "$IcingaCheckTimeSync_Object_Warning$"
            order = 4
        }
        "-Timeout" = {
            description = "Seconds before connection times out (default: 10)"
            value = "$IcingaCheckTimeSync_Int32_Timeout$"
            order = 6
        }
        "-Port" = {
            description = "Port number (default: 123)"
            value = "$IcingaCheckTimeSync_Int32_Port$"
            order = 7
        }
        "-IgnoreService" = {
            set_if = "$IcingaCheckTimeSync_Switchparameter_IgnoreService$"
            order = 99
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckTimeSync_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Critical" = {
            description = "Used to specify a offset Critical threshold e.g 20ms or 0.02s."
            value = "$IcingaCheckTimeSync_Object_Critical$"
            order = 5
        }
        "-Server" = {
            set_if = {{
                var str = macro("$IcingaCheckTimeSync_String_Server$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "The NTP Server you want to connect to."
            value = {{
                var str = macro("$IcingaCheckTimeSync_String_Server$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 2
        }
        "-TimeOffset" = {
            description = "The maximum acceptable offset between the local clock and the NTP Server, in seconds e.g. if you allow up to 0.5s timeoffset you can also enter 500ms. Invoke-IcingaCheckTimeSync will return OK, if there is no difference between them, WARNING, if the time difference exceeds the Warning threshold, CRITICAL, if the time difference exceeds the Critical threshold."
            value = "$IcingaCheckTimeSync_Object_TimeOffset$"
            order = 3
        }
        "-IPV4" = {
            set_if = "$IcingaCheckTimeSync_Switchparameter_IPV4$"
            order = 99
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckTimeSync_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckTimeSync_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
    }
    vars.IcingaCheckTimeSync_Switchparameter_IPV4 = false
    vars.IcingaCheckTimeSync_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "IPV4" = {
            set_if = "$IcingaCheckTimeSync_Switchparameter_IPV4$"
        }
        "TimeOffset" = {
            value = "$IcingaCheckTimeSync_Object_TimeOffset$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckTimeSync_String_ThresholdInterval$"
        }
        "Server" = {
            value = "$IcingaCheckTimeSync_String_Server$"
        }
        "Critical" = {
            value = "$IcingaCheckTimeSync_Object_Critical$"
        }
        "Port" = {
            value = "$IcingaCheckTimeSync_Int32_Port$"
        }
        "Timeout" = {
            value = "$IcingaCheckTimeSync_Int32_Timeout$"
        }
        "Warning" = {
            value = "$IcingaCheckTimeSync_Object_Warning$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckTimeSync_Switchparameter_NoPerfData$"
        }
        "IgnoreService" = {
            set_if = "$IcingaCheckTimeSync_Switchparameter_IgnoreService$"
        }
        "Verbosity" = {
            value = "$IcingaCheckTimeSync_Int32_Verbosity$"
        }
    }
    vars.ifw_api_command = "invoke-icingachecktimesync"
    vars.IcingaCheckTimeSync_Switchparameter_IgnoreService = false
}


