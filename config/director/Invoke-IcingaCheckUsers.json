{"DataList":{"IcingaCheckUsers Verbosity":{"list_name":"IcingaCheckUsers Verbosity","originalId":"2","entries":[{"allowed_roles":null,"entry_value":"0","entry_name":"0","format":"string"},{"allowed_roles":null,"entry_value":"1","entry_name":"1","format":"string"},{"allowed_roles":null,"entry_value":"2","entry_name":"2","format":"string"},{"allowed_roles":null,"entry_value":"3","entry_name":"3","format":"string"}],"owner":"cstein"},"PowerShell ExecutionPolicies":{"list_name":"PowerShell ExecutionPolicies","originalId":"2","entries":[{"allowed_roles":null,"entry_value":"AllSigned","entry_name":"AllSigned","format":"string"},{"allowed_roles":null,"entry_value":"Bypass","entry_name":"Bypass","format":"string"},{"allowed_roles":null,"entry_value":"Default","entry_name":"Default","format":"string"},{"allowed_roles":null,"entry_value":"RemoteSigned","entry_name":"RemoteSigned","format":"string"},{"allowed_roles":null,"entry_value":"Restricted","entry_name":"Restricted","format":"string"},{"allowed_roles":null,"entry_value":"Undefined","entry_name":"Undefined","format":"string"},{"allowed_roles":null,"entry_value":"Unrestricted","entry_name":"Unrestricted","format":"string"}],"owner":"cstein"}},"Command":{"PowerShell Base":{"methods_execute":"PluginCheck","object_name":"PowerShell Base","vars":{"IcingaPowerShellBase_String_ExecutionPolicy":"ByPass"},"is_string":null,"command":"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe","zone":null,"disabled":false,"fields":[{"datafield_id":2,"is_required":"n","var_filter":null}],"arguments":{"-C":{"value":"try { Use-Icinga -Minimal; } catch { Write-Output \u0027The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details\u0027; Write-Output \u0027Error:\u0027 $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable \u0027icinga-powershell-*\u0027 )`r`n\u0027Module-Path:\u0027`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command \u0027$ifw_api_command$\u0027 ","order":"0"},"-ExecutionPolicy":{"value":"$IcingaPowerShellBase_String_ExecutionPolicy$","order":"-1"},"-NoProfile":{"value":"-NoProfile","skip_key":true,"order":"-3"},"-NoLogo":{"value":"-NoLogo","skip_key":true,"order":"-2"}},"imports":[],"object_type":"object","timeout":"180"},"Invoke-IcingaCheckUsers":{"fields":[{"datafield_id":4,"is_required":"n","var_filter":null},{"datafield_id":5,"is_required":"n","var_filter":null},{"datafield_id":6,"is_required":"n","var_filter":null},{"datafield_id":7,"is_required":"n","var_filter":null},{"datafield_id":8,"is_required":"n","var_filter":null},{"datafield_id":9,"is_required":"n","var_filter":null}],"object_name":"Invoke-IcingaCheckUsers","arguments":{"-Verbosity":{"value":"$IcingaCheckUsers_Int32_Verbosity$","order":"5"},"-ThresholdInterval":{"set_if":"var str = macro(\"$IcingaCheckUsers_String_ThresholdInterval$\"); if (len(str) == 0) { return false; }; return true;","set_if_format":"expression","value":{"body":"var str = macro(\"$IcingaCheckUsers_String_ThresholdInterval$\");\r\nvar argLen = len(str);\r\n\r\nif (argLen == 0) {\r\n    return;\r\n}\r\n\r\nif (argLen != 0 \u0026\u0026 str.substr(0,1) == \"\u0027\" \u0026\u0026 str.substr(argLen - 1, argLen) == \"\u0027\") {\r\n    return str;\r\n}\r\n\r\nreturn (\"\u0027\" + str + \"\u0027\");","type":"Function"},"order":"100"},"-Warning":{"value":"$IcingaCheckUsers_Object_Warning$","order":"3"},"-Critical":{"value":"$IcingaCheckUsers_Object_Critical$","order":"4"},"-NoPerfData":{"set_if":"$IcingaCheckUsers_Switchparameter_NoPerfData$","set_if_format":"string","order":"99"},"-Username":{"value":{"body":"var arr = macro(\"$IcingaCheckUsers_Array_Username$\");\r\n\r\nif (len(arr) == 0) {\r\n    return \"@()\";\r\n}\r\n\r\nvar psarr = arr.map(\r\n    x =\u003e if (typeof(x) == String) {\r\n        var argLen = len(x);\r\n        if (argLen != 0 \u0026\u0026 x.substr(0,1) == \"\u0027\" \u0026\u0026 x.substr(argLen - 1, argLen) == \"\u0027\") {\r\n            x;\r\n        } else {\r\n            \"\u0027\" + x + \"\u0027\";\r\n        }\r\n    } else {\r\n        x;\r\n    }\r\n).join(\",\");\r\n\r\nreturn \"@(\" + psarr + \")\";","type":"Function"},"order":"2"}},"imports":["PowerShell Base"],"object_type":"object","vars":{"IcingaCheckUsers_Switchparameter_NoPerfData":false,"ifw_api_arguments":{"Username":{"value":"$IcingaCheckUsers_Array_Username$"},"ThresholdInterval":{"value":"$IcingaCheckUsers_String_ThresholdInterval$"},"Critical":{"value":"$IcingaCheckUsers_Object_Critical$"},"Warning":{"value":"$IcingaCheckUsers_Object_Warning$"},"NoPerfData":{"set_if":"$IcingaCheckUsers_Switchparameter_NoPerfData$"},"Verbosity":{"value":"$IcingaCheckUsers_Int32_Verbosity$"}},"ifw_api_command":"Invoke-IcingaCheckUsers"}}},"Datafield":{"7":{"settings":{"visibility":"visible"},"description":"Used to specify a Critical threshold. In this case an integer value.","caption":"Critical","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeString","originalId":"7","varname":"IcingaCheckUsers_Object_Critical","format":null},"9":{"settings":{"datalist":"IcingaCheckUsers Verbosity","behavior":"strict","data_type":"string"},"description":"Changes the behavior of the plugin output which check states are printed:\n0 (default): Only service checks/packages with state not OK will be printed\n1: Only services with not OK will be printed including OK checks of affected check packages including Package config\n2: Everything will be printed regardless of the check state\n3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])","caption":"Verbosity","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeDatalist","originalId":"9","varname":"IcingaCheckUsers_Int32_Verbosity","format":null},"2":{"settings":{"datalist":"PowerShell ExecutionPolicies","behavior":"strict","data_type":"string"},"description":"Defines with which Execution Policy the PowerShell is started","caption":"PowerShell Execution Policy","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeDatalist","originalId":"2","varname":"IcingaPowerShellBase_String_ExecutionPolicy","format":null},"4":{"settings":{"visibility":"visible"},"description":"Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/110-Installation/06-Collect-Metrics-over-Time/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring.","caption":"ThresholdInterval","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeString","originalId":"4","varname":"IcingaCheckUsers_String_ThresholdInterval","format":null},"6":{"settings":{"visibility":"visible"},"description":"Used to specify a Warning threshold. In this case an integer value.","caption":"Warning","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeString","originalId":"6","varname":"IcingaCheckUsers_Object_Warning","format":null},"5":{"settings":{"visibility":"visible"},"description":"Used to specify an array of usernames to match against. e.g \u0027Administrator\u0027, \u0027Icinga\u0027","caption":"Username","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeArray","originalId":"5","varname":"IcingaCheckUsers_Array_Username","format":null},"8":{"settings":{"visibility":"visible"},"description":null,"caption":"NoPerfData","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeBoolean","originalId":"8","varname":"IcingaCheckUsers_Switchparameter_NoPerfData","format":null}}}
