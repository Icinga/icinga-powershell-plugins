{"DataList":{"PowerShell ExecutionPolicies":{"list_name":"PowerShell ExecutionPolicies","originalId":"2","entries":[{"allowed_roles":null,"entry_value":"AllSigned","entry_name":"AllSigned","format":"string"},{"allowed_roles":null,"entry_value":"Bypass","entry_name":"Bypass","format":"string"},{"allowed_roles":null,"entry_value":"Default","entry_name":"Default","format":"string"},{"allowed_roles":null,"entry_value":"RemoteSigned","entry_name":"RemoteSigned","format":"string"},{"allowed_roles":null,"entry_value":"Restricted","entry_name":"Restricted","format":"string"},{"allowed_roles":null,"entry_value":"Undefined","entry_name":"Undefined","format":"string"},{"allowed_roles":null,"entry_value":"Unrestricted","entry_name":"Unrestricted","format":"string"}],"owner":"stein"},"IcingaCheckHttpJsonResponse Verbosity":{"list_name":"IcingaCheckHttpJsonResponse Verbosity","originalId":"2","entries":[{"allowed_roles":null,"entry_value":"0","entry_name":"0","format":"string"},{"allowed_roles":null,"entry_value":"1","entry_name":"1","format":"string"},{"allowed_roles":null,"entry_value":"2","entry_name":"2","format":"string"},{"allowed_roles":null,"entry_value":"3","entry_name":"3","format":"string"}],"owner":"stein"},"IcingaCheckHttpJsonResponse StatusOnRequestError":{"list_name":"IcingaCheckHttpJsonResponse StatusOnRequestError","originalId":"2","entries":[{"allowed_roles":null,"entry_value":"Unknown","entry_name":"Unknown","format":"string"},{"allowed_roles":null,"entry_value":"Warning","entry_name":"Warning","format":"string"},{"allowed_roles":null,"entry_value":"Critical","entry_name":"Critical","format":"string"},{"allowed_roles":null,"entry_value":"OK","entry_name":"OK","format":"string"}],"owner":"stein"}},"Command":{"PowerShell Base":{"methods_execute":"PluginCheck","object_name":"PowerShell Base","vars":{"IcingaPowerShellBase_String_ExecutionPolicy":"ByPass"},"is_string":null,"command":"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe","zone":null,"disabled":false,"fields":[{"datafield_id":2,"is_required":"n","var_filter":null}],"arguments":{"-ExecutionPolicy":{"value":"$IcingaPowerShellBase_String_ExecutionPolicy$","order":"-1"},"-NoProfile":{"set_if":true,"order":"-3"},"-NoLogo":{"set_if":true,"order":"-2"}},"imports":[],"object_type":"object","timeout":"180"},"Invoke-IcingaCheckHttpJsonResponse":{"fields":[{"datafield_id":4,"is_required":"n","var_filter":null},{"datafield_id":5,"is_required":"n","var_filter":null},{"datafield_id":6,"is_required":"n","var_filter":null},{"datafield_id":7,"is_required":"n","var_filter":null},{"datafield_id":8,"is_required":"n","var_filter":null},{"datafield_id":9,"is_required":"n","var_filter":null},{"datafield_id":10,"is_required":"n","var_filter":null},{"datafield_id":11,"is_required":"n","var_filter":null},{"datafield_id":12,"is_required":"n","var_filter":null},{"datafield_id":13,"is_required":"n","var_filter":null},{"datafield_id":14,"is_required":"n","var_filter":null},{"datafield_id":15,"is_required":"n","var_filter":null},{"datafield_id":16,"is_required":"n","var_filter":null},{"datafield_id":17,"is_required":"n","var_filter":null},{"datafield_id":18,"is_required":"n","var_filter":null},{"datafield_id":19,"is_required":"n","var_filter":null}],"object_name":"Invoke-IcingaCheckHttpJsonResponse","arguments":{"-ServerPath":{"set_if":"var str = macro(\"$IcingaCheckHttpJsonResponse_String_ServerPath$\"); if (len(str) == 0) { return false; }; return true;","set_if_format":"expression","value":{"body":"var str = macro(\"$IcingaCheckHttpJsonResponse_String_ServerPath$\");\r\nvar argLen = len(str);\r\n\r\nif (argLen == 0) {\r\n    return;\r\n}\r\n\r\nif (argLen != 0 \u0026\u0026 str.substr(0,1) == \"\u0027\" \u0026\u0026 str.substr(argLen - 1, argLen) == \"\u0027\") {\r\n    return str;\r\n}\r\n\r\nreturn (\"\u0027\" + str + \"\u0027\");","type":"Function"},"order":"3"},"-Verbosity":{"value":"$IcingaCheckHttpJsonResponse_Int32_Verbosity$","order":"13"},"-StatusOnRequestError":{"set_if":"var str = macro(\"$IcingaCheckHttpJsonResponse_String_StatusOnRequestError$\"); if (len(str) == 0) { return false; }; return true;","set_if_format":"expression","value":{"body":"var str = macro(\"$IcingaCheckHttpJsonResponse_String_StatusOnRequestError$\");\r\nvar argLen = len(str);\r\n\r\nif (argLen == 0) {\r\n    return;\r\n}\r\n\r\nif (argLen != 0 \u0026\u0026 str.substr(0,1) == \"\u0027\" \u0026\u0026 str.substr(argLen - 1, argLen) == \"\u0027\") {\r\n    return str;\r\n}\r\n\r\nreturn (\"\u0027\" + str + \"\u0027\");","type":"Function"},"order":"12"},"-NoPerfData":{"set_if":"$IcingaCheckHttpJsonResponse_Switchparameter_NoPerfData$","set_if_format":"string","order":"99"},"-Password":{"value":"(ConvertTo-IcingaSecureString \u0027$IcingaCheckHttpJsonResponse_Securestring_Password$\u0027)","order":"6"},"-Username":{"set_if":"var str = macro(\"$IcingaCheckHttpJsonResponse_String_Username$\"); if (len(str) == 0) { return false; }; return true;","set_if_format":"expression","value":{"body":"var str = macro(\"$IcingaCheckHttpJsonResponse_String_Username$\");\r\nvar argLen = len(str);\r\n\r\nif (argLen == 0) {\r\n    return;\r\n}\r\n\r\nif (argLen != 0 \u0026\u0026 str.substr(0,1) == \"\u0027\" \u0026\u0026 str.substr(argLen - 1, argLen) == \"\u0027\") {\r\n    return str;\r\n}\r\n\r\nreturn (\"\u0027\" + str + \"\u0027\");","type":"Function"},"order":"5"},"-ValuePaths":{"value":{"body":"var arr = macro(\"$IcingaCheckHttpJsonResponse_Array_ValuePaths$\");\r\n\r\nif (len(arr) == 0) {\r\n    return \"@()\";\r\n}\r\n\r\nvar psarr = arr.map(\r\n    x =\u003e if (typeof(x) == String) {\r\n        var argLen = len(x);\r\n        if (argLen != 0 \u0026\u0026 x.substr(0,1) == \"\u0027\" \u0026\u0026 x.substr(argLen - 1, argLen) == \"\u0027\") {\r\n            x;\r\n        } else {\r\n            \"\u0027\" + x + \"\u0027\";\r\n        }\r\n    } else {\r\n        x;\r\n    }\r\n).join(\",\");\r\n\r\nreturn \"@(\" + psarr + \")\";","type":"Function"},"order":"8"},"-ValueTypes":{"value":{"body":"var arr = macro(\"$IcingaCheckHttpJsonResponse_Array_ValueTypes$\");\r\n\r\nif (len(arr) == 0) {\r\n    return \"@()\";\r\n}\r\n\r\nvar psarr = arr.map(\r\n    x =\u003e if (typeof(x) == String) {\r\n        var argLen = len(x);\r\n        if (argLen != 0 \u0026\u0026 x.substr(0,1) == \"\u0027\" \u0026\u0026 x.substr(argLen - 1, argLen) == \"\u0027\") {\r\n            x;\r\n        } else {\r\n            \"\u0027\" + x + \"\u0027\";\r\n        }\r\n    } else {\r\n        x;\r\n    }\r\n).join(\",\");\r\n\r\nreturn \"@(\" + psarr + \")\";","type":"Function"},"order":"9"},"-C":{"value":"try { Use-Icinga -Minimal; } catch { Write-Output \u0027The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details\u0027; Write-Output \u0027Error:\u0027 $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable \u0027icinga-powershell-*\u0027 )`r`n\u0027Module-Path:\u0027`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command \u0027Invoke-IcingaCheckHttpJsonResponse\u0027 ","order":"0"},"-ThresholdInterval":{"set_if":"var str = macro(\"$IcingaCheckHttpJsonResponse_String_ThresholdInterval$\"); if (len(str) == 0) { return false; }; return true;","set_if_format":"expression","value":{"body":"var str = macro(\"$IcingaCheckHttpJsonResponse_String_ThresholdInterval$\");\r\nvar argLen = len(str);\r\n\r\nif (argLen == 0) {\r\n    return;\r\n}\r\n\r\nif (argLen != 0 \u0026\u0026 str.substr(0,1) == \"\u0027\" \u0026\u0026 str.substr(argLen - 1, argLen) == \"\u0027\") {\r\n    return str;\r\n}\r\n\r\nreturn (\"\u0027\" + str + \"\u0027\");","type":"Function"},"order":"100"},"-ServerUri":{"set_if":"var str = macro(\"$IcingaCheckHttpJsonResponse_String_ServerUri$\"); if (len(str) == 0) { return false; }; return true;","set_if_format":"expression","value":{"body":"var str = macro(\"$IcingaCheckHttpJsonResponse_String_ServerUri$\");\r\nvar argLen = len(str);\r\n\r\nif (argLen == 0) {\r\n    return;\r\n}\r\n\r\nif (argLen != 0 \u0026\u0026 str.substr(0,1) == \"\u0027\" \u0026\u0026 str.substr(argLen - 1, argLen) == \"\u0027\") {\r\n    return str;\r\n}\r\n\r\nreturn (\"\u0027\" + str + \"\u0027\");","type":"Function"},"order":"2"},"-Critical":{"value":{"body":"var arr = macro(\"$IcingaCheckHttpJsonResponse_Array_Critical$\");\r\n\r\nif (len(arr) == 0) {\r\n    return \"@()\";\r\n}\r\n\r\nvar psarr = arr.map(\r\n    x =\u003e if (typeof(x) == String) {\r\n        var argLen = len(x);\r\n        if (argLen != 0 \u0026\u0026 x.substr(0,1) == \"\u0027\" \u0026\u0026 x.substr(argLen - 1, argLen) == \"\u0027\") {\r\n            x;\r\n        } else {\r\n            \"\u0027\" + x + \"\u0027\";\r\n        }\r\n    } else {\r\n        x;\r\n    }\r\n).join(\",\");\r\n\r\nreturn \"@(\" + psarr + \")\";","type":"Function"},"order":"11"},"-IgnoreSSL":{"set_if":"$IcingaCheckHttpJsonResponse_Switchparameter_IgnoreSSL$","set_if_format":"string","order":"99"},"-Timeout":{"value":"$IcingaCheckHttpJsonResponse_Int32_Timeout$","order":"7"},"-Warning":{"value":{"body":"var arr = macro(\"$IcingaCheckHttpJsonResponse_Array_Warning$\");\r\n\r\nif (len(arr) == 0) {\r\n    return \"@()\";\r\n}\r\n\r\nvar psarr = arr.map(\r\n    x =\u003e if (typeof(x) == String) {\r\n        var argLen = len(x);\r\n        if (argLen != 0 \u0026\u0026 x.substr(0,1) == \"\u0027\" \u0026\u0026 x.substr(argLen - 1, argLen) == \"\u0027\") {\r\n            x;\r\n        } else {\r\n            \"\u0027\" + x + \"\u0027\";\r\n        }\r\n    } else {\r\n        x;\r\n    }\r\n).join(\",\");\r\n\r\nreturn \"@(\" + psarr + \")\";","type":"Function"},"order":"10"},"-QueryParameter":{"set_if":"var str = macro(\"$IcingaCheckHttpJsonResponse_String_QueryParameter$\"); if (len(str) == 0) { return false; }; return true;","set_if_format":"expression","value":{"body":"var str = macro(\"$IcingaCheckHttpJsonResponse_String_QueryParameter$\");\r\nvar argLen = len(str);\r\n\r\nif (argLen == 0) {\r\n    return;\r\n}\r\n\r\nif (argLen != 0 \u0026\u0026 str.substr(0,1) == \"\u0027\" \u0026\u0026 str.substr(argLen - 1, argLen) == \"\u0027\") {\r\n    return str;\r\n}\r\n\r\nreturn (\"\u0027\" + str + \"\u0027\");","type":"Function"},"order":"4"},"-NegateStringResults":{"set_if":"$IcingaCheckHttpJsonResponse_Switchparameter_NegateStringResults$","set_if_format":"string","order":"99"}},"imports":["PowerShell Base"],"object_type":"object","vars":{"IcingaCheckHttpJsonResponse_Switchparameter_NegateStringResults":false,"IcingaCheckHttpJsonResponse_Switchparameter_IgnoreSSL":false,"IcingaCheckHttpJsonResponse_Switchparameter_NoPerfData":false}}},"Datafield":{"16":{"settings":{"datalist":"IcingaCheckHttpJsonResponse StatusOnRequestError","behavior":"strict","data_type":"string"},"description":"Status to set when the webservice cannot be reached or an error (e.g. 500) is returned - default is Unknown\nSee https://icinga.com/docs/icinga-for-windows/latest/plugins/doc/10-Icinga-Plugins/ for description of threshold values","caption":"StatusOnRequestError","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeDatalist","originalId":"16","varname":"IcingaCheckHttpJsonResponse_String_StatusOnRequestError","format":null},"7":{"settings":{"visibility":"visible"},"description":"Query parameter for the request without ?, example \"command=example\"","caption":"QueryParameter","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeString","originalId":"7","varname":"IcingaCheckHttpJsonResponse_String_QueryParameter","format":null},"5":{"settings":{"visibility":"visible"},"description":"Base URI of the server, example \"https://example.comm\"","caption":"ServerUri","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeString","originalId":"5","varname":"IcingaCheckHttpJsonResponse_String_ServerUri","format":null},"18":{"settings":{"datalist":"IcingaCheckHttpJsonResponse Verbosity","behavior":"strict","data_type":"string"},"description":"Changes the behavior of the plugin output which check states are printed:\n0 (default): Only service checks/packages with state not OK will be printed\n1: Only services with not OK will be printed including OK checks of affected check packages including Package config\n2: Everything will be printed regardless of the check state\n3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])","caption":"Verbosity","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeDatalist","originalId":"18","varname":"IcingaCheckHttpJsonResponse_Int32_Verbosity","format":null},"12":{"settings":{"visibility":"visible"},"description":"Value types of each parameter. Supported Types: Numeric, Boolean, DateTime, String Example: \"myAlias01:Numeric\",\"myAlias02:DateTime\"","caption":"ValueTypes","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeArray","originalId":"12","varname":"IcingaCheckHttpJsonResponse_Array_ValueTypes","format":null},"10":{"settings":{"visibility":"visible"},"description":"Timeout in seconds before the http request is aborted. Defaults to 30","caption":"Timeout","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeNumber","originalId":"10","varname":"IcingaCheckHttpJsonResponse_Int32_Timeout","format":null},"2":{"settings":{"datalist":"PowerShell ExecutionPolicies","behavior":"strict","data_type":"string"},"description":"Defines with which Execution Policy the PowerShell is started","caption":"PowerShell Execution Policy","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeDatalist","originalId":"2","varname":"IcingaPowerShellBase_String_ExecutionPolicy","format":null},"8":{"settings":{"visibility":"visible"},"description":"Credentials to use for basic auth","caption":"Username","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeString","originalId":"8","varname":"IcingaCheckHttpJsonResponse_String_Username","format":null},"17":{"settings":{"visibility":"visible"},"description":"Negate the conditions set for string parameters. When this is set to true, WarnIfLike/CritIfLike is used instead of WarnIfNotLike/CritIfNotLike for Strings","caption":"NegateStringResults","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeBoolean","originalId":"17","varname":"IcingaCheckHttpJsonResponse_Switchparameter_NegateStringResults","format":null},"11":{"settings":{"visibility":"visible"},"description":"paths to look for values in the JSON object that is checked, including an alias for each parameter. Example: \"myAlias01:value01\",\"myAlias02:nested.object.value02\", \"myAlias03:\u0027object\u0027.\u0027my.Par.With.Dots\u0027\"","caption":"ValuePaths","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeArray","originalId":"11","varname":"IcingaCheckHttpJsonResponse_Array_ValuePaths","format":null},"9":{"settings":{"visibility":"hidden"},"description":"Credentials to use for basic auth","caption":"Password","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeString","originalId":"9","varname":"IcingaCheckHttpJsonResponse_Securestring_Password","format":null},"14":{"settings":{"visibility":"visible"},"description":"Critical thresholds using icinga-powershell syntax. Example: \"myNumericAlias01:~:2\",\"myDateTimeAlias:-10d\", \"myBooleanAlias:True\"","caption":"Critical","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeArray","originalId":"14","varname":"IcingaCheckHttpJsonResponse_Array_Critical","format":null},"15":{"settings":{"visibility":"visible"},"description":"Disables SSL verification and allows the connection to endpoints with self-signed certificates as example","caption":"IgnoreSSL","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeBoolean","originalId":"15","varname":"IcingaCheckHttpJsonResponse_Switchparameter_IgnoreSSL","format":null},"6":{"settings":{"visibility":"visible"},"description":"Path for the request, example \"/v1/my_endpoint\"","caption":"ServerPath","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeString","originalId":"6","varname":"IcingaCheckHttpJsonResponse_String_ServerPath","format":null},"4":{"settings":{"visibility":"visible"},"description":"Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring.","caption":"ThresholdInterval","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeString","originalId":"4","varname":"IcingaCheckHttpJsonResponse_String_ThresholdInterval","format":null},"19":{"settings":{"visibility":"visible"},"description":null,"caption":"NoPerfData","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeBoolean","originalId":"19","varname":"IcingaCheckHttpJsonResponse_Switchparameter_NoPerfData","format":null},"13":{"settings":{"visibility":"visible"},"description":"Warning thresholds using icinga-powershell syntax. Example: \"myNumericAlias01:~:2\",\"myDateTimeAlias:-10d\", \"myBooleanAlias:True\"","caption":"Warning","datatype":"Icinga\\Module\\Director\\DataType\\DataTypeArray","originalId":"13","varname":"IcingaCheckHttpJsonResponse_Array_Warning","format":null}}}
